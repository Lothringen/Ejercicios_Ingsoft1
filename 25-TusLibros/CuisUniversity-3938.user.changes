

----STARTUP---- (30 October 2019 15:03:37) as /home/cliberman/Descargas/linux64/CuisUniversity-3938.image!


TestCase subclass: #TestsCarrito
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!

!classDefinition: #TestsCarrito category: #'TusLibros.com' stamp: 'CL 10/30/2019 15:14:24'!
TestCase subclass: #TestsCarrito
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!

!classDefinition: #Carrito category: #'TusLibros.com' stamp: 'CL 10/30/2019 15:17:23'!
Object subclass: #Carrito
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!
!TestsCarrito methodsFor: 'nil' stamp: 'CL 10/30/2019 15:17:15'!
test01NewCartIsEmpty

	self assert: Carrito new isEmpty.! !

!testRun: #TestsCarrito #test01NewCartIsEmpty stamp: 'CL 10/30/2019 15:17:30'!
ERROR!
!Carrito methodsFor: 'evaluating' stamp: 'CL 10/30/2019 15:18:23'!
isEmpty
	self shouldBeImplemented.! !
!Carrito methodsFor: 'evaluating' stamp: 'CL 10/30/2019 15:18:33' prior: 50777385!
isEmpty
	^true! !

!testRun: #TestsCarrito #test01NewCartIsEmpty stamp: 'CL 10/30/2019 15:18:35'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmpty stamp: 'CL 10/30/2019 15:18:35'!
PASSED!

!classDefinition: #TestsCarrito category: #'TusLibros.com' stamp: 'CL 10/30/2019 15:31:23'!
TestCase subclass: #TestsCarrito
	instanceVariableNames: 'aBookFromTheEditorial'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 15:31:19'!
test02ACartKnowsAddedProduct

	|aCart|
	
	aCart := Carrito createCart: 1.
	aCart addToCart: aBookFromTheEditorial. 

	self deny: aCart isEmpty.
	self assert: aCart totalAmountOfBooks equals: 1.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 1. ! !

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 15:31:44'!
ERROR!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 15:33:58'!
test01NewCartIsEmptyAndKnowsItsID

	|aCart|
	
	aCart := Carrito createCart: 1.
	

	self assert: aCart isEmpty.
	self assert: aCart id equals: 1. ! !

!methodRemoval: TestsCarrito #test01NewCartIsEmpty stamp: 'CL 10/30/2019 15:34:09'!
test01NewCartIsEmpty

	self assert: Carrito new isEmpty.!

!classDefinition: #TestsCarrito category: #'TusLibros.com' stamp: 'CL 10/30/2019 15:34:50'!
TestCase subclass: #TestsCarrito
	instanceVariableNames: 'aBookFromTheEditorial aCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 15:34:45' prior: 50777421!
test01NewCartIsEmptyAndKnowsItsID

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	

	self assert: aCart isEmpty.
	self assert: aCart id equals: aCartID. ! !
!TestsCarrito methodsFor: 'nil' stamp: 'CL 10/30/2019 15:35:45'!
setUp

	aCartID := 1.
	aBookFromTheEditorial := 'Odisea'! !

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 15:36:06'!
ERROR!
!Carrito class methodsFor: 'instance creation' stamp: 'CL 10/30/2019 15:36:26'!
createCart: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCreateCart: aSmallInteger ! !
!Carrito class methodsFor: 'instance creation' stamp: 'CL 10/30/2019 15:37:35' prior: 50777458!
createCart: anID 
	
	^self new initializeWithID: anID ! !

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 15:37:40'!
ERROR!

!classDefinition: #Carrito category: #'TusLibros.com' stamp: 'CL 10/30/2019 15:38:11'!
Object subclass: #Carrito
	instanceVariableNames: 'iD'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!
!Carrito methodsFor: 'initialization' stamp: 'CL 10/30/2019 15:38:11'!
initializeWithID: anID 
	self shouldBeImplemented.
	iD := anID.! !

!classDefinition: #Carrito category: #'TusLibros.com' stamp: 'CL 10/30/2019 15:38:49'!
Object subclass: #Carrito
	instanceVariableNames: 'iD cartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!
!Carrito methodsFor: 'initialization' stamp: 'CL 10/30/2019 15:38:44' prior: 50777481!
initializeWithID: anID 
	
	cartID := anID.! !

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 15:38:53'!
ERROR!
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 15:39:06'!
id
	self shouldBeImplemented.! !
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 15:39:14' prior: 50777500!
id
	^cartID! !

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 15:39:22'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 15:39:22'!
PASSED!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 15:39:22'!
ERROR!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 15:39:22'!
ERROR!
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 15:39:56'!
addToCart: aString 
	self shouldBeImplemented.! !
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 15:40:36' prior: 50777520!
addToCart: aBook 
	| product |
	product:= aBook. ! !

!classDefinition: #Carrito category: #'TusLibros.com' stamp: 'CL 10/30/2019 15:41:36'!
Object subclass: #Carrito
	instanceVariableNames: 'iD cartID cartProduct'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 15:41:34' prior: 50777525!
addToCart: aBook 

	cartProduct:= aBook. ! !

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 15:41:40'!
FAILURE!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 15:42:11'!
FAILURE!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 15:42:41'!
FAILURE!
!Carrito methodsFor: 'evaluating' stamp: 'CL 10/30/2019 15:44:43' prior: 50777389!
isEmpty
	^cartProduct isNil. ! !

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 15:44:51'!
ERROR!
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 15:45:16'!
totalAmountOfBooks
	self shouldBeImplemented.! !
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 15:45:25' prior: 50777558!
totalAmountOfBooks
	^1! !

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 15:45:29'!
ERROR!
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 15:45:38'!
amountOfThisProduct: aString 
	self shouldBeImplemented.! !
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 15:46:04' prior: 50777569!
amountOfThisProduct: aBook
	^1
	! !

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 15:46:06'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 15:46:06'!
PASSED!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 15:46:06'!
PASSED!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 15:50:46'!
test03ACartCanHaveMultipleBooks

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: aBookFromTheEditorial.
	aCart addToCart: aBookFromTheEditorial.

	self assert: aCart totalAmountOfBooks equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2. ! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 15:51:13'!
test03ACartCanHaveMultipleCopiesOfTheSameBook

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: aBookFromTheEditorial.
	aCart addToCart: aBookFromTheEditorial.

	self assert: aCart totalAmountOfBooks equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2. ! !

!methodRemoval: TestsCarrito #test03ACartCanHaveMultipleBooks stamp: 'CL 10/30/2019 15:51:13'!
test03ACartCanHaveMultipleBooks

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: aBookFromTheEditorial.
	aCart addToCart: aBookFromTheEditorial.

	self assert: aCart totalAmountOfBooks equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2. !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 15:51:32' prior: 50777406!
test02ACartKnowsAddedProduct

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: aBookFromTheEditorial. 

	self deny: aCart isEmpty.
	self assert: aCart totalAmountOfBooks equals: 1.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 1. ! !

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 15:53:08'!
FAILURE!

----End fileIn of /home/cliberman/Descargas/linux64/Packages/TerseGuide.pck.st----!
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:02:00' prior: 50777537!
addToCart: aBook 

	cartProduct at: aBook put: ((cartProduct at: aBook ifAbsent: [0]) + 1).! !

Object subclass: #Carrito
	instanceVariableNames: 'cartID cartProduct'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!

!classDefinition: #Carrito category: #'TusLibros.com' stamp: 'CL 10/30/2019 16:02:36'!
Object subclass: #Carrito
	instanceVariableNames: 'cartID cartProduct'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!

!classDefinition: #Carrito category: #'TusLibros.com' stamp: 'CL 10/30/2019 16:03:01'!
Object subclass: #Carrito
	instanceVariableNames: 'cartID cartProducts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:03:01' prior: 50780650!
addToCart: aBook 

	cartProducts at: aBook put: ((cartProducts at: aBook ifAbsent: [0]) + 1).! !
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:03:01' prior: 50777551!
isEmpty
	^cartProducts isNil. ! !
!Carrito methodsFor: 'initialization' stamp: 'CL 10/30/2019 16:03:29' prior: 50777493!
initializeWithID: anID 
	
	cartID := anID.
	cartProducts := Dictionary new.! !

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 16:03:44'!
FAILURE!
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 16:04:29' prior: 50777563!
totalAmountOfBooks
	^cartProducts size! !
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 16:05:07' prior: 50777574!
amountOfThisProduct: aBook
	^cartProducts at:aBook. ! !

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 16:05:17'!
FAILURE!

(cartProducts at: aBook ifAbsent: [0])!

((cartProducts at: aBook ifAbsent: [0]) + 1)!
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 16:10:24' prior: 50780694!
totalAmountOfBooks
	^cartProducts inject: 0 into: [:totalAmountOfBooks :amountOfABook | totalAmountOfBooks + amountOfABook].! !

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 16:10:28'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:10:28'!
FAILURE!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 16:10:28'!
PASSED!

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 16:10:28'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:10:28'!
FAILURE!
!Carrito methodsFor: 'evaluating' stamp: 'CL 10/30/2019 16:10:51' prior: 50780681!
isEmpty
	^cartProducts isEmpty. ! !

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:10:53'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:11:00'!
PASSED!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 16:11:00'!
PASSED!

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 16:11:00'!
PASSED!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:18:42'!
test04CanAddToCartMultipleCopiesOfABookAtTheSameTime

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 5 copiesOf: aBookFromTheEditorial.   

	self assert: aCart totalAmountOfBooks equals: 5.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 5. ! !

!testRun: #TestsCarrito #test04CanAddToCartMultipleCopiesOfABookAtTheSameTime stamp: 'CL 10/30/2019 16:18:44'!
ERROR!
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:18:54'!
addToCart: aSmallInteger copiesOf: aString 
	self shouldBeImplemented.! !
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:19:38' prior: 50780766!
addToCart: anAmountOfBooks copiesOf: aBook 
	
	cartProducts at: aBook put: ((cartProducts at: aBook ifAbsent: [0]) + anAmountOfBooks).! !

!testRun: #TestsCarrito #test04CanAddToCartMultipleCopiesOfABookAtTheSameTime stamp: 'CL 10/30/2019 16:20:01'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:20:01'!
PASSED!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 16:20:01'!
PASSED!

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 16:20:01'!
PASSED!

!testRun: #TestsCarrito #test04CanAddToCartMultipleCopiesOfABookAtTheSameTime stamp: 'CL 10/30/2019 16:20:01'!
PASSED!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:20:30' prior: 50777599!
test03ACartCanHaveMultipleCopiesOfTheSameBook

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 1 copiesOf: aBookFromTheEditorial.
	aCart addToCart: 1 copiesOf: aBookFromTheEditorial.

	self assert: aCart totalAmountOfBooks equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2. ! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:21:00' prior: 50780797!
test03ACartCanHaveMultipleCopiesOfTheSameBook

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 2 copiesOf: aBookFromTheEditorial.

	self assert: aCart totalAmountOfBooks equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2. ! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:21:07' prior: 50777624!
test02ACartKnowsAddedProduct

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 1 copiesOf: aBookFromTheEditorial. 

	self deny: aCart isEmpty.
	self assert: aCart totalAmountOfBooks equals: 1.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 1. ! !

!methodRemoval: TestsCarrito #test04CanAddToCartMultipleCopiesOfABookAtTheSameTime stamp: 'CL 10/30/2019 16:21:23'!
test04CanAddToCartMultipleCopiesOfABookAtTheSameTime

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 5 copiesOf: aBookFromTheEditorial.   

	self assert: aCart totalAmountOfBooks equals: 5.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 5. !

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:21:33'!
PASSED!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 16:21:33'!
PASSED!

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 16:21:33'!
PASSED!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:23:39'!
test04CanNotAddNegativeAmountsOfBooksToCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: -1 copiesOf: aBookFromTheEditorial.

	self assert: aCart totalAmountOfBooks equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2. ! !

----End fileIn of /home/cliberman/Descargas/Numero-Solution-1.st----!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:26:45' prior: 50780858!
test04CanNotAddNegativeAmountsOfBooksToCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	
	self 
		should: [aCart addToCart: -1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
	self assert: aCart totalAmountOfBooks equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2.].

	! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:28:50' prior: 50781522!
test04CanNotAddNegativeAmountsOfBooksToCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	
	self 
		should: [aCart addToCart: -1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText equals: Carrito canNotAddNegativeAmountsOfBooksToCartErrorDescription.
	self assert: aCart totalAmountOfBooks equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2.].

	! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:29:09' prior: 50781537!
test04CanNotAddNegativeAmountsOfBooksToCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	
	self 
		should: [aCart addToCart: -1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText equals: Carrito canNotAddNegativeAmountsOfBooksToCartErrorDescription.
	self assert: aCart totalAmountOfBooks equals: 0.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 0.].

	! !

!testRun: #TestsCarrito #test04CanNotAddNegativeAmountsOfBooksToCart stamp: 'CL 10/30/2019 16:29:10'!
FAILURE!
!Carrito class methodsFor: 'nil' stamp: 'CL 10/30/2019 16:29:58'!
canNotAddNegativeAmountsOfBooksToCartErrorDescription

	^'No se pueden agregar cantidades negativas del libro al carrito'! !

!testRun: #TestsCarrito #test04CanNotAddNegativeAmountsOfBooksToCart stamp: 'CL 10/30/2019 16:30:21'!
FAILURE!
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:32:04' prior: 50780772!
addToCart: anAmountOfBooks copiesOf: aBook 
	
	anAmountOfBooks negative ifTrue:[self error: self class canNotAddNegativeAmountsOfBooksToCartErrorDescription].
	cartProducts at: aBook put: ((cartProducts at: aBook ifAbsent: [0]) + anAmountOfBooks).! !

!testRun: #TestsCarrito #test04CanNotAddNegativeAmountsOfBooksToCart stamp: 'CL 10/30/2019 16:32:06'!
ERROR!
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 16:32:40' prior: 50780698!
amountOfThisProduct: aBook
	^cartProducts at:aBook ifAbsent:[0]. ! !

!testRun: #TestsCarrito #test04CanNotAddNegativeAmountsOfBooksToCart stamp: 'CL 10/30/2019 16:32:42'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:32:42'!
PASSED!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 16:32:42'!
PASSED!

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 16:32:42'!
PASSED!

!testRun: #TestsCarrito #test04CanNotAddNegativeAmountsOfBooksToCart stamp: 'CL 10/30/2019 16:32:42'!
PASSED!

!testRun: #TestsCarrito #test04CanNotAddNegativeAmountsOfBooksToCart stamp: 'CL 10/30/2019 16:32:52'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:32:52'!
PASSED!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 16:32:52'!
PASSED!

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 16:32:52'!
PASSED!

!testRun: #TestsCarrito #test04CanNotAddNegativeAmountsOfBooksToCart stamp: 'CL 10/30/2019 16:32:52'!
PASSED!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:34:20'!
test03ACartCanHaveMultipleCopiesOfTheSameProduct

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 2 copiesOf: aBookFromTheEditorial.

	self assert: aCart totalAmountOfBooks equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2. ! !

!methodRemoval: TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 16:34:20'!
test03ACartCanHaveMultipleCopiesOfTheSameBook

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 2 copiesOf: aBookFromTheEditorial.

	self assert: aCart totalAmountOfBooks equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2. !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:34:34'!
test04CanNotAddNegativeAmountsOfProductsToCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	
	self 
		should: [aCart addToCart: -1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText equals: Carrito canNotAddNegativeAmountsOfBooksToCartErrorDescription.
	self assert: aCart totalAmountOfBooks equals: 0.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 0.].

	! !

!methodRemoval: TestsCarrito #test04CanNotAddNegativeAmountsOfBooksToCart stamp: 'CL 10/30/2019 16:34:34'!
test04CanNotAddNegativeAmountsOfBooksToCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	
	self 
		should: [aCart addToCart: -1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText equals: Carrito canNotAddNegativeAmountsOfBooksToCartErrorDescription.
	self assert: aCart totalAmountOfBooks equals: 0.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 0.].

	!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:35:52'!
test05CanRemoveProductsFromCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 1 copiesOf: aBookFromTheEditorial.
	aCart removeFromCart: 1 copiesOf: aBookFromTheEditorial.

	self assert: aCart totalAmountOfBooks equals: 0.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 0. ! !

!testRun: #TestsCarrito #test05CanRemoveProductsFromCart stamp: 'CL 10/30/2019 16:35:56'!
ERROR!
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:36:06'!
removeFromCart: aSmallInteger copiesOf: aString 
	self shouldBeImplemented.! !
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:37:20' prior: 50781587!
addToCart: anAmountOfProducts copiesOf: aProduct 
	
	anAmountOfProducts negative ifTrue:[self error: self class canNotAddNegativeAmountsOfBooksToCartErrorDescription].
	cartProducts at: aProduct put: ((cartProducts at: aProduct ifAbsent: [0]) + anAmountOfProducts).! !
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:37:38' prior: 50781715!
removeFromCart: anAmountOfProducts copiesOf: aProduct

	cartProducts at: aProduct put: ((cartProducts at: aProduct ifAbsent: [0]) - anAmountOfProducts). 
	! !

!testRun: #TestsCarrito #test05CanRemoveProductsFromCart stamp: 'CL 10/30/2019 16:37:42'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:37:42'!
PASSED!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 16:37:42'!
PASSED!

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameProduct stamp: 'CL 10/30/2019 16:37:42'!
PASSED!

!testRun: #TestsCarrito #test04CanNotAddNegativeAmountsOfProductsToCart stamp: 'CL 10/30/2019 16:37:42'!
PASSED!

!testRun: #TestsCarrito #test05CanRemoveProductsFromCart stamp: 'CL 10/30/2019 16:37:42'!
PASSED!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:39:18'!
test06CanNotRemoveProductsThatAreNotInCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	
	self 
		should: [aCart removeFromCart: 1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText equals: Carrito canNotRemoveProductsThatAreNotInCartErrorDescription.
	self assert: aCart totalAmountOfBooks equals: 0.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 0.].

	! !

!testRun: #TestsCarrito #test06CanNotRemoveProductsThatAreNotInCart stamp: 'CL 10/30/2019 16:39:56'!
FAILURE!
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:44:36' prior: 50781733!
removeFromCart: anAmountOfProducts copiesOf: aProduct
	|oldAmountOfProduct|
	
	oldAmountOfProduct := (cartProducts at: aProduct ifAbsent: [0]).

	(oldAmountOfProduct >= anAmountOfProducts) ifTrue: [self error: self class ].

	cartProducts at: aProduct put: (oldAmountOfProduct - anAmountOfProducts). 
	! !
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:44:45' prior: 50781783!
removeFromCart: anAmountOfProducts copiesOf: aProduct
	|oldAmountOfProduct|
	
	oldAmountOfProduct := (cartProducts at: aProduct ifAbsent: [0]).

	(oldAmountOfProduct >= anAmountOfProducts) ifTrue: [self error: self class canNotRemoveProductsThatAreNotInCartErrorDescription].

	cartProducts at: aProduct put: (oldAmountOfProduct - anAmountOfProducts). 
	! !

!testRun: #TestsCarrito #test06CanNotRemoveProductsThatAreNotInCart stamp: 'CL 10/30/2019 16:44:47'!
FAILURE!
!Carrito class methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:46:48'!
canNotRemoveProductsThatAreNotInCartErrorDescription

	^'No se puede quitar mas productos de un tipo de los que hay en el carrito'! !

!testRun: #TestsCarrito #test06CanNotRemoveProductsThatAreNotInCart stamp: 'CL 10/30/2019 16:47:07'!
FAILURE!
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:48:17' prior: 50781796!
removeFromCart: anAmountOfProducts copiesOf: aProduct
	|oldAmountOfProduct|
	
	oldAmountOfProduct := (cartProducts at: aProduct ifAbsent: [0]).

	(oldAmountOfProduct < anAmountOfProducts) ifTrue: [self error: self class canNotRemoveProductsThatAreNotInCartErrorDescription].

	cartProducts at: aProduct put: (oldAmountOfProduct - anAmountOfProducts). 
	! !

!testRun: #TestsCarrito #test06CanNotRemoveProductsThatAreNotInCart stamp: 'CL 10/30/2019 16:48:19'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:48:19'!
PASSED!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 16:48:19'!
PASSED!

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameProduct stamp: 'CL 10/30/2019 16:48:19'!
PASSED!

!testRun: #TestsCarrito #test04CanNotAddNegativeAmountsOfProductsToCart stamp: 'CL 10/30/2019 16:48:19'!
PASSED!

!testRun: #TestsCarrito #test05CanRemoveProductsFromCart stamp: 'CL 10/30/2019 16:48:19'!
PASSED!

!testRun: #TestsCarrito #test06CanNotRemoveProductsThatAreNotInCart stamp: 'CL 10/30/2019 16:48:19'!
PASSED!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:49:55'!
test07CanNotRemoveNegativeAmountsOfAProductFromCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 1 copiesOf: aBookFromTheEditorial.
	
	self 
		should: [aCart removeFromCart: -1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText equals: Carrito canNotRemoveNegativeAmountsOfAProductFromCart.
	self assert: aCart totalAmountOfBooks equals: 1.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 1.].

	! !

!testRun: #TestsCarrito #test07CanNotRemoveNegativeAmountsOfAProductFromCart stamp: 'CL 10/30/2019 16:50:01'!
FAILURE!
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:50:53' prior: 50781825!
removeFromCart: anAmountOfProducts copiesOf: aProduct
	|oldAmountOfProduct|
	
	anAmountOfProducts negative ifTrue:[self error: self class canNotAddNegativeAmountsOfBooksToCartErrorDescription].
	
	oldAmountOfProduct := (cartProducts at: aProduct ifAbsent: [0]).

	(oldAmountOfProduct < anAmountOfProducts) ifTrue: [self error: self class canNotRemoveProductsThatAreNotInCartErrorDescription].

	cartProducts at: aProduct put: (oldAmountOfProduct - anAmountOfProducts). 
	! !
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:51:05' prior: 50781886!
removeFromCart: anAmountOfProducts copiesOf: aProduct
	|oldAmountOfProduct|
	
	anAmountOfProducts negative ifTrue:[self error: self class canNotRemoveNegativeAmountsOfAProductFromCart].
	
	oldAmountOfProduct := (cartProducts at: aProduct ifAbsent: [0]).

	(oldAmountOfProduct < anAmountOfProducts) ifTrue: [self error: self class canNotRemoveProductsThatAreNotInCartErrorDescription].

	cartProducts at: aProduct put: (oldAmountOfProduct - anAmountOfProducts). 
	! !

self class canNotRemoveNegativeAmountsOfAProductFromCart!
!Carrito class methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:51:26'!
canNotRemoveNegativeAmountsOfAProductFromCart
	self shouldBeImplemented.! !
!Carrito class methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:51:58' prior: 50781923!
canNotRemoveNegativeAmountsOfAProductFromCart
	^'No se quitar cantidades negativas del producto del carrito'! !

!testRun: #TestsCarrito #test07CanNotRemoveNegativeAmountsOfAProductFromCart stamp: 'CL 10/30/2019 16:52:06'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:52:06'!
PASSED!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 16:52:06'!
PASSED!

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameProduct stamp: 'CL 10/30/2019 16:52:06'!
PASSED!

!testRun: #TestsCarrito #test04CanNotAddNegativeAmountsOfProductsToCart stamp: 'CL 10/30/2019 16:52:06'!
PASSED!

!testRun: #TestsCarrito #test05CanRemoveProductsFromCart stamp: 'CL 10/30/2019 16:52:06'!
PASSED!

!testRun: #TestsCarrito #test06CanNotRemoveProductsThatAreNotInCart stamp: 'CL 10/30/2019 16:52:06'!
PASSED!

!testRun: #TestsCarrito #test07CanNotRemoveNegativeAmountsOfAProductFromCart stamp: 'CL 10/30/2019 16:52:06'!
PASSED!

!methodRemoval: Carrito #addToCart: stamp: 'CL 10/30/2019 16:52:25'!
addToCart: aBook 

	cartProducts at: aBook put: ((cartProducts at: aBook ifAbsent: [0]) + 1).!
!Carrito class methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:52:57'!
canNotAddNegativeAmountsOfProductToCartErrorDescription

	^'No se pueden agregar cantidades negativas del libro al carrito'! !
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:52:57' prior: 50781721!
addToCart: anAmountOfProducts copiesOf: aProduct 
	
	anAmountOfProducts negative ifTrue:[self error: self class canNotAddNegativeAmountsOfProductToCartErrorDescription].
	cartProducts at: aProduct put: ((cartProducts at: aProduct ifAbsent: [0]) + anAmountOfProducts).! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:52:57' prior: 50781663!
test04CanNotAddNegativeAmountsOfProductsToCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	
	self 
		should: [aCart addToCart: -1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText equals: Carrito canNotAddNegativeAmountsOfProductToCartErrorDescription.
	self assert: aCart totalAmountOfBooks equals: 0.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 0.].

	! !

!methodRemoval: Carrito class #canNotAddNegativeAmountsOfBooksToCartErrorDescription stamp: 'CL 10/30/2019 16:52:57'!
canNotAddNegativeAmountsOfBooksToCartErrorDescription

	^'No se pueden agregar cantidades negativas del libro al carrito'!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:54:59' prior: 50777450!
setUp

	aCartID := 1.
	aBookFromTheEditorial := 'Odiseo'! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:55:12' prior: 50782013!
setUp

	aCartID := 1.
	aBookFromTheEditorial := 'La Odisea'! !
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 16:57:27'!
totalAmountOfProducts
	^cartProducts inject: 0 into: [:totalAmountOfBooks :amountOfABook | totalAmountOfBooks + amountOfABook].! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:57:27' prior: 50781987!
test04CanNotAddNegativeAmountsOfProductsToCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	
	self 
		should: [aCart addToCart: -1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText equals: Carrito canNotAddNegativeAmountsOfProductToCartErrorDescription.
	self assert: aCart totalAmountOfProducts equals: 0.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 0.].

	! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:57:27' prior: 50781862!
test07CanNotRemoveNegativeAmountsOfAProductFromCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 1 copiesOf: aBookFromTheEditorial.
	
	self 
		should: [aCart removeFromCart: -1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText equals: Carrito canNotRemoveNegativeAmountsOfAProductFromCart.
	self assert: aCart totalAmountOfProducts equals: 1.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 1.].

	! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:57:27' prior: 50781699!
test05CanRemoveProductsFromCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 1 copiesOf: aBookFromTheEditorial.
	aCart removeFromCart: 1 copiesOf: aBookFromTheEditorial.

	self assert: aCart totalAmountOfProducts equals: 0.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 0. ! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:57:27' prior: 50780823!
test02ACartKnowsAddedProduct

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 1 copiesOf: aBookFromTheEditorial. 

	self deny: aCart isEmpty.
	self assert: aCart totalAmountOfProducts equals: 1.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 1. ! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:57:27' prior: 50781639!
test03ACartCanHaveMultipleCopiesOfTheSameProduct

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 2 copiesOf: aBookFromTheEditorial.

	self assert: aCart totalAmountOfProducts equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2. ! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:57:27' prior: 50781761!
test06CanNotRemoveProductsThatAreNotInCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	
	self 
		should: [aCart removeFromCart: 1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText equals: Carrito canNotRemoveProductsThatAreNotInCartErrorDescription.
	self assert: aCart totalAmountOfProducts equals: 0.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 0.].

	! !

!methodRemoval: Carrito #totalAmountOfBooks stamp: 'CL 10/30/2019 16:57:27'!
totalAmountOfBooks
	^cartProducts inject: 0 into: [:totalAmountOfBooks :amountOfABook | totalAmountOfBooks + amountOfABook].!

----QUIT----(30 October 2019 17:01:09) CuisUniversity-3938.image priorSource: 14319118!