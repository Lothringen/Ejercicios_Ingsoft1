

----STARTUP---- (30 October 2019 15:03:37) as /home/cliberman/Descargas/linux64/CuisUniversity-3938.image!


TestCase subclass: #TestsCarrito
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!

!classDefinition: #TestsCarrito category: #'TusLibros.com' stamp: 'CL 10/30/2019 15:14:24'!
TestCase subclass: #TestsCarrito
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!

!classDefinition: #Carrito category: #'TusLibros.com' stamp: 'CL 10/30/2019 15:17:23'!
Object subclass: #Carrito
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!
!TestsCarrito methodsFor: 'nil' stamp: 'CL 10/30/2019 15:17:15'!
test01NewCartIsEmpty

	self assert: Carrito new isEmpty.! !

!testRun: #TestsCarrito #test01NewCartIsEmpty stamp: 'CL 10/30/2019 15:17:30'!
ERROR!
!Carrito methodsFor: 'evaluating' stamp: 'CL 10/30/2019 15:18:23'!
isEmpty
	self shouldBeImplemented.! !
!Carrito methodsFor: 'evaluating' stamp: 'CL 10/30/2019 15:18:33' prior: 50777385!
isEmpty
	^true! !

!testRun: #TestsCarrito #test01NewCartIsEmpty stamp: 'CL 10/30/2019 15:18:35'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmpty stamp: 'CL 10/30/2019 15:18:35'!
PASSED!

!classDefinition: #TestsCarrito category: #'TusLibros.com' stamp: 'CL 10/30/2019 15:31:23'!
TestCase subclass: #TestsCarrito
	instanceVariableNames: 'aBookFromTheEditorial'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 15:31:19'!
test02ACartKnowsAddedProduct

	|aCart|
	
	aCart := Carrito createCart: 1.
	aCart addToCart: aBookFromTheEditorial. 

	self deny: aCart isEmpty.
	self assert: aCart totalAmountOfBooks equals: 1.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 1. ! !

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 15:31:44'!
ERROR!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 15:33:58'!
test01NewCartIsEmptyAndKnowsItsID

	|aCart|
	
	aCart := Carrito createCart: 1.
	

	self assert: aCart isEmpty.
	self assert: aCart id equals: 1. ! !

!methodRemoval: TestsCarrito #test01NewCartIsEmpty stamp: 'CL 10/30/2019 15:34:09'!
test01NewCartIsEmpty

	self assert: Carrito new isEmpty.!

!classDefinition: #TestsCarrito category: #'TusLibros.com' stamp: 'CL 10/30/2019 15:34:50'!
TestCase subclass: #TestsCarrito
	instanceVariableNames: 'aBookFromTheEditorial aCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 15:34:45' prior: 50777421!
test01NewCartIsEmptyAndKnowsItsID

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	

	self assert: aCart isEmpty.
	self assert: aCart id equals: aCartID. ! !
!TestsCarrito methodsFor: 'nil' stamp: 'CL 10/30/2019 15:35:45'!
setUp

	aCartID := 1.
	aBookFromTheEditorial := 'Odisea'! !

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 15:36:06'!
ERROR!
!Carrito class methodsFor: 'instance creation' stamp: 'CL 10/30/2019 15:36:26'!
createCart: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCreateCart: aSmallInteger ! !
!Carrito class methodsFor: 'instance creation' stamp: 'CL 10/30/2019 15:37:35' prior: 50777458!
createCart: anID 
	
	^self new initializeWithID: anID ! !

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 15:37:40'!
ERROR!

!classDefinition: #Carrito category: #'TusLibros.com' stamp: 'CL 10/30/2019 15:38:11'!
Object subclass: #Carrito
	instanceVariableNames: 'iD'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!
!Carrito methodsFor: 'initialization' stamp: 'CL 10/30/2019 15:38:11'!
initializeWithID: anID 
	self shouldBeImplemented.
	iD := anID.! !

!classDefinition: #Carrito category: #'TusLibros.com' stamp: 'CL 10/30/2019 15:38:49'!
Object subclass: #Carrito
	instanceVariableNames: 'iD cartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!
!Carrito methodsFor: 'initialization' stamp: 'CL 10/30/2019 15:38:44' prior: 50777481!
initializeWithID: anID 
	
	cartID := anID.! !

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 15:38:53'!
ERROR!
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 15:39:06'!
id
	self shouldBeImplemented.! !
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 15:39:14' prior: 50777500!
id
	^cartID! !

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 15:39:22'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 15:39:22'!
PASSED!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 15:39:22'!
ERROR!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 15:39:22'!
ERROR!
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 15:39:56'!
addToCart: aString 
	self shouldBeImplemented.! !
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 15:40:36' prior: 50777520!
addToCart: aBook 
	| product |
	product:= aBook. ! !

!classDefinition: #Carrito category: #'TusLibros.com' stamp: 'CL 10/30/2019 15:41:36'!
Object subclass: #Carrito
	instanceVariableNames: 'iD cartID cartProduct'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 15:41:34' prior: 50777525!
addToCart: aBook 

	cartProduct:= aBook. ! !

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 15:41:40'!
FAILURE!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 15:42:11'!
FAILURE!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 15:42:41'!
FAILURE!
!Carrito methodsFor: 'evaluating' stamp: 'CL 10/30/2019 15:44:43' prior: 50777389!
isEmpty
	^cartProduct isNil. ! !

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 15:44:51'!
ERROR!
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 15:45:16'!
totalAmountOfBooks
	self shouldBeImplemented.! !
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 15:45:25' prior: 50777558!
totalAmountOfBooks
	^1! !

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 15:45:29'!
ERROR!
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 15:45:38'!
amountOfThisProduct: aString 
	self shouldBeImplemented.! !
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 15:46:04' prior: 50777569!
amountOfThisProduct: aBook
	^1
	! !

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 15:46:06'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 15:46:06'!
PASSED!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 15:46:06'!
PASSED!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 15:50:46'!
test03ACartCanHaveMultipleBooks

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: aBookFromTheEditorial.
	aCart addToCart: aBookFromTheEditorial.

	self assert: aCart totalAmountOfBooks equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2. ! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 15:51:13'!
test03ACartCanHaveMultipleCopiesOfTheSameBook

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: aBookFromTheEditorial.
	aCart addToCart: aBookFromTheEditorial.

	self assert: aCart totalAmountOfBooks equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2. ! !

!methodRemoval: TestsCarrito #test03ACartCanHaveMultipleBooks stamp: 'CL 10/30/2019 15:51:13'!
test03ACartCanHaveMultipleBooks

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: aBookFromTheEditorial.
	aCart addToCart: aBookFromTheEditorial.

	self assert: aCart totalAmountOfBooks equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2. !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 15:51:32' prior: 50777406!
test02ACartKnowsAddedProduct

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: aBookFromTheEditorial. 

	self deny: aCart isEmpty.
	self assert: aCart totalAmountOfBooks equals: 1.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 1. ! !

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 15:53:08'!
FAILURE!

----End fileIn of /home/cliberman/Descargas/linux64/Packages/TerseGuide.pck.st----!
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:02:00' prior: 50777537!
addToCart: aBook 

	cartProduct at: aBook put: ((cartProduct at: aBook ifAbsent: [0]) + 1).! !

Object subclass: #Carrito
	instanceVariableNames: 'cartID cartProduct'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!

!classDefinition: #Carrito category: #'TusLibros.com' stamp: 'CL 10/30/2019 16:02:36'!
Object subclass: #Carrito
	instanceVariableNames: 'cartID cartProduct'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!

!classDefinition: #Carrito category: #'TusLibros.com' stamp: 'CL 10/30/2019 16:03:01'!
Object subclass: #Carrito
	instanceVariableNames: 'cartID cartProducts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros.com'!
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:03:01' prior: 50780650!
addToCart: aBook 

	cartProducts at: aBook put: ((cartProducts at: aBook ifAbsent: [0]) + 1).! !
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:03:01' prior: 50777551!
isEmpty
	^cartProducts isNil. ! !
!Carrito methodsFor: 'initialization' stamp: 'CL 10/30/2019 16:03:29' prior: 50777493!
initializeWithID: anID 
	
	cartID := anID.
	cartProducts := Dictionary new.! !

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 16:03:44'!
FAILURE!
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 16:04:29' prior: 50777563!
totalAmountOfBooks
	^cartProducts size! !
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 16:05:07' prior: 50777574!
amountOfThisProduct: aBook
	^cartProducts at:aBook. ! !

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 16:05:17'!
FAILURE!

(cartProducts at: aBook ifAbsent: [0])!

((cartProducts at: aBook ifAbsent: [0]) + 1)!
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 16:10:24' prior: 50780694!
totalAmountOfBooks
	^cartProducts inject: 0 into: [:totalAmountOfBooks :amountOfABook | totalAmountOfBooks + amountOfABook].! !

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 16:10:28'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:10:28'!
FAILURE!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 16:10:28'!
PASSED!

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 16:10:28'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:10:28'!
FAILURE!
!Carrito methodsFor: 'evaluating' stamp: 'CL 10/30/2019 16:10:51' prior: 50780681!
isEmpty
	^cartProducts isEmpty. ! !

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:10:53'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:11:00'!
PASSED!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 16:11:00'!
PASSED!

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 16:11:00'!
PASSED!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:18:42'!
test04CanAddToCartMultipleCopiesOfABookAtTheSameTime

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 5 copiesOf: aBookFromTheEditorial.   

	self assert: aCart totalAmountOfBooks equals: 5.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 5. ! !

!testRun: #TestsCarrito #test04CanAddToCartMultipleCopiesOfABookAtTheSameTime stamp: 'CL 10/30/2019 16:18:44'!
ERROR!
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:18:54'!
addToCart: aSmallInteger copiesOf: aString 
	self shouldBeImplemented.! !
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:19:38' prior: 50780766!
addToCart: anAmountOfBooks copiesOf: aBook 
	
	cartProducts at: aBook put: ((cartProducts at: aBook ifAbsent: [0]) + anAmountOfBooks).! !

!testRun: #TestsCarrito #test04CanAddToCartMultipleCopiesOfABookAtTheSameTime stamp: 'CL 10/30/2019 16:20:01'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:20:01'!
PASSED!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 16:20:01'!
PASSED!

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 16:20:01'!
PASSED!

!testRun: #TestsCarrito #test04CanAddToCartMultipleCopiesOfABookAtTheSameTime stamp: 'CL 10/30/2019 16:20:01'!
PASSED!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:20:30' prior: 50777599!
test03ACartCanHaveMultipleCopiesOfTheSameBook

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 1 copiesOf: aBookFromTheEditorial.
	aCart addToCart: 1 copiesOf: aBookFromTheEditorial.

	self assert: aCart totalAmountOfBooks equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2. ! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:21:00' prior: 50780797!
test03ACartCanHaveMultipleCopiesOfTheSameBook

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 2 copiesOf: aBookFromTheEditorial.

	self assert: aCart totalAmountOfBooks equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2. ! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:21:07' prior: 50777624!
test02ACartKnowsAddedProduct

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 1 copiesOf: aBookFromTheEditorial. 

	self deny: aCart isEmpty.
	self assert: aCart totalAmountOfBooks equals: 1.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 1. ! !

!methodRemoval: TestsCarrito #test04CanAddToCartMultipleCopiesOfABookAtTheSameTime stamp: 'CL 10/30/2019 16:21:23'!
test04CanAddToCartMultipleCopiesOfABookAtTheSameTime

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 5 copiesOf: aBookFromTheEditorial.   

	self assert: aCart totalAmountOfBooks equals: 5.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 5. !

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:21:33'!
PASSED!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 16:21:33'!
PASSED!

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 16:21:33'!
PASSED!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:23:39'!
test04CanNotAddNegativeAmountsOfBooksToCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: -1 copiesOf: aBookFromTheEditorial.

	self assert: aCart totalAmountOfBooks equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2. ! !

----End fileIn of /home/cliberman/Descargas/Numero-Solution-1.st----!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:26:45' prior: 50780858!
test04CanNotAddNegativeAmountsOfBooksToCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	
	self 
		should: [aCart addToCart: -1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
	self assert: aCart totalAmountOfBooks equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2.].

	! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:28:50' prior: 50781522!
test04CanNotAddNegativeAmountsOfBooksToCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	
	self 
		should: [aCart addToCart: -1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText equals: Carrito canNotAddNegativeAmountsOfBooksToCartErrorDescription.
	self assert: aCart totalAmountOfBooks equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2.].

	! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:29:09' prior: 50781537!
test04CanNotAddNegativeAmountsOfBooksToCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	
	self 
		should: [aCart addToCart: -1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText equals: Carrito canNotAddNegativeAmountsOfBooksToCartErrorDescription.
	self assert: aCart totalAmountOfBooks equals: 0.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 0.].

	! !

!testRun: #TestsCarrito #test04CanNotAddNegativeAmountsOfBooksToCart stamp: 'CL 10/30/2019 16:29:10'!
FAILURE!
!Carrito class methodsFor: 'nil' stamp: 'CL 10/30/2019 16:29:58'!
canNotAddNegativeAmountsOfBooksToCartErrorDescription

	^'No se pueden agregar cantidades negativas del libro al carrito'! !

!testRun: #TestsCarrito #test04CanNotAddNegativeAmountsOfBooksToCart stamp: 'CL 10/30/2019 16:30:21'!
FAILURE!
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:32:04' prior: 50780772!
addToCart: anAmountOfBooks copiesOf: aBook 
	
	anAmountOfBooks negative ifTrue:[self error: self class canNotAddNegativeAmountsOfBooksToCartErrorDescription].
	cartProducts at: aBook put: ((cartProducts at: aBook ifAbsent: [0]) + anAmountOfBooks).! !

!testRun: #TestsCarrito #test04CanNotAddNegativeAmountsOfBooksToCart stamp: 'CL 10/30/2019 16:32:06'!
ERROR!
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 16:32:40' prior: 50780698!
amountOfThisProduct: aBook
	^cartProducts at:aBook ifAbsent:[0]. ! !

!testRun: #TestsCarrito #test04CanNotAddNegativeAmountsOfBooksToCart stamp: 'CL 10/30/2019 16:32:42'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:32:42'!
PASSED!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 16:32:42'!
PASSED!

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 16:32:42'!
PASSED!

!testRun: #TestsCarrito #test04CanNotAddNegativeAmountsOfBooksToCart stamp: 'CL 10/30/2019 16:32:42'!
PASSED!

!testRun: #TestsCarrito #test04CanNotAddNegativeAmountsOfBooksToCart stamp: 'CL 10/30/2019 16:32:52'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:32:52'!
PASSED!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 16:32:52'!
PASSED!

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 16:32:52'!
PASSED!

!testRun: #TestsCarrito #test04CanNotAddNegativeAmountsOfBooksToCart stamp: 'CL 10/30/2019 16:32:52'!
PASSED!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:34:20'!
test03ACartCanHaveMultipleCopiesOfTheSameProduct

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 2 copiesOf: aBookFromTheEditorial.

	self assert: aCart totalAmountOfBooks equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2. ! !

!methodRemoval: TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'CL 10/30/2019 16:34:20'!
test03ACartCanHaveMultipleCopiesOfTheSameBook

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 2 copiesOf: aBookFromTheEditorial.

	self assert: aCart totalAmountOfBooks equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2. !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:34:34'!
test04CanNotAddNegativeAmountsOfProductsToCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	
	self 
		should: [aCart addToCart: -1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText equals: Carrito canNotAddNegativeAmountsOfBooksToCartErrorDescription.
	self assert: aCart totalAmountOfBooks equals: 0.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 0.].

	! !

!methodRemoval: TestsCarrito #test04CanNotAddNegativeAmountsOfBooksToCart stamp: 'CL 10/30/2019 16:34:34'!
test04CanNotAddNegativeAmountsOfBooksToCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	
	self 
		should: [aCart addToCart: -1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText equals: Carrito canNotAddNegativeAmountsOfBooksToCartErrorDescription.
	self assert: aCart totalAmountOfBooks equals: 0.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 0.].

	!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:35:52'!
test05CanRemoveProductsFromCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 1 copiesOf: aBookFromTheEditorial.
	aCart removeFromCart: 1 copiesOf: aBookFromTheEditorial.

	self assert: aCart totalAmountOfBooks equals: 0.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 0. ! !

!testRun: #TestsCarrito #test05CanRemoveProductsFromCart stamp: 'CL 10/30/2019 16:35:56'!
ERROR!
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:36:06'!
removeFromCart: aSmallInteger copiesOf: aString 
	self shouldBeImplemented.! !
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:37:20' prior: 50781587!
addToCart: anAmountOfProducts copiesOf: aProduct 
	
	anAmountOfProducts negative ifTrue:[self error: self class canNotAddNegativeAmountsOfBooksToCartErrorDescription].
	cartProducts at: aProduct put: ((cartProducts at: aProduct ifAbsent: [0]) + anAmountOfProducts).! !
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:37:38' prior: 50781715!
removeFromCart: anAmountOfProducts copiesOf: aProduct

	cartProducts at: aProduct put: ((cartProducts at: aProduct ifAbsent: [0]) - anAmountOfProducts). 
	! !

!testRun: #TestsCarrito #test05CanRemoveProductsFromCart stamp: 'CL 10/30/2019 16:37:42'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:37:42'!
PASSED!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 16:37:42'!
PASSED!

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameProduct stamp: 'CL 10/30/2019 16:37:42'!
PASSED!

!testRun: #TestsCarrito #test04CanNotAddNegativeAmountsOfProductsToCart stamp: 'CL 10/30/2019 16:37:42'!
PASSED!

!testRun: #TestsCarrito #test05CanRemoveProductsFromCart stamp: 'CL 10/30/2019 16:37:42'!
PASSED!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:39:18'!
test06CanNotRemoveProductsThatAreNotInCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	
	self 
		should: [aCart removeFromCart: 1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText equals: Carrito canNotRemoveProductsThatAreNotInCartErrorDescription.
	self assert: aCart totalAmountOfBooks equals: 0.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 0.].

	! !

!testRun: #TestsCarrito #test06CanNotRemoveProductsThatAreNotInCart stamp: 'CL 10/30/2019 16:39:56'!
FAILURE!
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:44:36' prior: 50781733!
removeFromCart: anAmountOfProducts copiesOf: aProduct
	|oldAmountOfProduct|
	
	oldAmountOfProduct := (cartProducts at: aProduct ifAbsent: [0]).

	(oldAmountOfProduct >= anAmountOfProducts) ifTrue: [self error: self class ].

	cartProducts at: aProduct put: (oldAmountOfProduct - anAmountOfProducts). 
	! !
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:44:45' prior: 50781783!
removeFromCart: anAmountOfProducts copiesOf: aProduct
	|oldAmountOfProduct|
	
	oldAmountOfProduct := (cartProducts at: aProduct ifAbsent: [0]).

	(oldAmountOfProduct >= anAmountOfProducts) ifTrue: [self error: self class canNotRemoveProductsThatAreNotInCartErrorDescription].

	cartProducts at: aProduct put: (oldAmountOfProduct - anAmountOfProducts). 
	! !

!testRun: #TestsCarrito #test06CanNotRemoveProductsThatAreNotInCart stamp: 'CL 10/30/2019 16:44:47'!
FAILURE!
!Carrito class methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:46:48'!
canNotRemoveProductsThatAreNotInCartErrorDescription

	^'No se puede quitar mas productos de un tipo de los que hay en el carrito'! !

!testRun: #TestsCarrito #test06CanNotRemoveProductsThatAreNotInCart stamp: 'CL 10/30/2019 16:47:07'!
FAILURE!
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:48:17' prior: 50781796!
removeFromCart: anAmountOfProducts copiesOf: aProduct
	|oldAmountOfProduct|
	
	oldAmountOfProduct := (cartProducts at: aProduct ifAbsent: [0]).

	(oldAmountOfProduct < anAmountOfProducts) ifTrue: [self error: self class canNotRemoveProductsThatAreNotInCartErrorDescription].

	cartProducts at: aProduct put: (oldAmountOfProduct - anAmountOfProducts). 
	! !

!testRun: #TestsCarrito #test06CanNotRemoveProductsThatAreNotInCart stamp: 'CL 10/30/2019 16:48:19'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:48:19'!
PASSED!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 16:48:19'!
PASSED!

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameProduct stamp: 'CL 10/30/2019 16:48:19'!
PASSED!

!testRun: #TestsCarrito #test04CanNotAddNegativeAmountsOfProductsToCart stamp: 'CL 10/30/2019 16:48:19'!
PASSED!

!testRun: #TestsCarrito #test05CanRemoveProductsFromCart stamp: 'CL 10/30/2019 16:48:19'!
PASSED!

!testRun: #TestsCarrito #test06CanNotRemoveProductsThatAreNotInCart stamp: 'CL 10/30/2019 16:48:19'!
PASSED!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:49:55'!
test07CanNotRemoveNegativeAmountsOfAProductFromCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 1 copiesOf: aBookFromTheEditorial.
	
	self 
		should: [aCart removeFromCart: -1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText equals: Carrito canNotRemoveNegativeAmountsOfAProductFromCart.
	self assert: aCart totalAmountOfBooks equals: 1.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 1.].

	! !

!testRun: #TestsCarrito #test07CanNotRemoveNegativeAmountsOfAProductFromCart stamp: 'CL 10/30/2019 16:50:01'!
FAILURE!
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:50:53' prior: 50781825!
removeFromCart: anAmountOfProducts copiesOf: aProduct
	|oldAmountOfProduct|
	
	anAmountOfProducts negative ifTrue:[self error: self class canNotAddNegativeAmountsOfBooksToCartErrorDescription].
	
	oldAmountOfProduct := (cartProducts at: aProduct ifAbsent: [0]).

	(oldAmountOfProduct < anAmountOfProducts) ifTrue: [self error: self class canNotRemoveProductsThatAreNotInCartErrorDescription].

	cartProducts at: aProduct put: (oldAmountOfProduct - anAmountOfProducts). 
	! !
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:51:05' prior: 50781886!
removeFromCart: anAmountOfProducts copiesOf: aProduct
	|oldAmountOfProduct|
	
	anAmountOfProducts negative ifTrue:[self error: self class canNotRemoveNegativeAmountsOfAProductFromCart].
	
	oldAmountOfProduct := (cartProducts at: aProduct ifAbsent: [0]).

	(oldAmountOfProduct < anAmountOfProducts) ifTrue: [self error: self class canNotRemoveProductsThatAreNotInCartErrorDescription].

	cartProducts at: aProduct put: (oldAmountOfProduct - anAmountOfProducts). 
	! !

self class canNotRemoveNegativeAmountsOfAProductFromCart!
!Carrito class methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:51:26'!
canNotRemoveNegativeAmountsOfAProductFromCart
	self shouldBeImplemented.! !
!Carrito class methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:51:58' prior: 50781923!
canNotRemoveNegativeAmountsOfAProductFromCart
	^'No se quitar cantidades negativas del producto del carrito'! !

!testRun: #TestsCarrito #test07CanNotRemoveNegativeAmountsOfAProductFromCart stamp: 'CL 10/30/2019 16:52:06'!
PASSED!

!testRun: #TestsCarrito #test01NewCartIsEmptyAndKnowsItsID stamp: 'CL 10/30/2019 16:52:06'!
PASSED!

!testRun: #TestsCarrito #test02ACartKnowsAddedProduct stamp: 'CL 10/30/2019 16:52:06'!
PASSED!

!testRun: #TestsCarrito #test03ACartCanHaveMultipleCopiesOfTheSameProduct stamp: 'CL 10/30/2019 16:52:06'!
PASSED!

!testRun: #TestsCarrito #test04CanNotAddNegativeAmountsOfProductsToCart stamp: 'CL 10/30/2019 16:52:06'!
PASSED!

!testRun: #TestsCarrito #test05CanRemoveProductsFromCart stamp: 'CL 10/30/2019 16:52:06'!
PASSED!

!testRun: #TestsCarrito #test06CanNotRemoveProductsThatAreNotInCart stamp: 'CL 10/30/2019 16:52:06'!
PASSED!

!testRun: #TestsCarrito #test07CanNotRemoveNegativeAmountsOfAProductFromCart stamp: 'CL 10/30/2019 16:52:06'!
PASSED!

!methodRemoval: Carrito #addToCart: stamp: 'CL 10/30/2019 16:52:25'!
addToCart: aBook 

	cartProducts at: aBook put: ((cartProducts at: aBook ifAbsent: [0]) + 1).!
!Carrito class methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:52:57'!
canNotAddNegativeAmountsOfProductToCartErrorDescription

	^'No se pueden agregar cantidades negativas del libro al carrito'! !
!Carrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:52:57' prior: 50781721!
addToCart: anAmountOfProducts copiesOf: aProduct 
	
	anAmountOfProducts negative ifTrue:[self error: self class canNotAddNegativeAmountsOfProductToCartErrorDescription].
	cartProducts at: aProduct put: ((cartProducts at: aProduct ifAbsent: [0]) + anAmountOfProducts).! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:52:57' prior: 50781663!
test04CanNotAddNegativeAmountsOfProductsToCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	
	self 
		should: [aCart addToCart: -1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText equals: Carrito canNotAddNegativeAmountsOfProductToCartErrorDescription.
	self assert: aCart totalAmountOfBooks equals: 0.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 0.].

	! !

!methodRemoval: Carrito class #canNotAddNegativeAmountsOfBooksToCartErrorDescription stamp: 'CL 10/30/2019 16:52:57'!
canNotAddNegativeAmountsOfBooksToCartErrorDescription

	^'No se pueden agregar cantidades negativas del libro al carrito'!
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:54:59' prior: 50777450!
setUp

	aCartID := 1.
	aBookFromTheEditorial := 'Odiseo'! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:55:12' prior: 50782013!
setUp

	aCartID := 1.
	aBookFromTheEditorial := 'La Odisea'! !
!Carrito methodsFor: 'accessing' stamp: 'CL 10/30/2019 16:57:27'!
totalAmountOfProducts
	^cartProducts inject: 0 into: [:totalAmountOfBooks :amountOfABook | totalAmountOfBooks + amountOfABook].! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:57:27' prior: 50781987!
test04CanNotAddNegativeAmountsOfProductsToCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	
	self 
		should: [aCart addToCart: -1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText equals: Carrito canNotAddNegativeAmountsOfProductToCartErrorDescription.
	self assert: aCart totalAmountOfProducts equals: 0.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 0.].

	! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:57:27' prior: 50781862!
test07CanNotRemoveNegativeAmountsOfAProductFromCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 1 copiesOf: aBookFromTheEditorial.
	
	self 
		should: [aCart removeFromCart: -1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText equals: Carrito canNotRemoveNegativeAmountsOfAProductFromCart.
	self assert: aCart totalAmountOfProducts equals: 1.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 1.].

	! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:57:27' prior: 50781699!
test05CanRemoveProductsFromCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 1 copiesOf: aBookFromTheEditorial.
	aCart removeFromCart: 1 copiesOf: aBookFromTheEditorial.

	self assert: aCart totalAmountOfProducts equals: 0.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 0. ! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:57:27' prior: 50780823!
test02ACartKnowsAddedProduct

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 1 copiesOf: aBookFromTheEditorial. 

	self deny: aCart isEmpty.
	self assert: aCart totalAmountOfProducts equals: 1.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 1. ! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:57:27' prior: 50781639!
test03ACartCanHaveMultipleCopiesOfTheSameProduct

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	aCart addToCart: 2 copiesOf: aBookFromTheEditorial.

	self assert: aCart totalAmountOfProducts equals: 2.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 2. ! !
!TestsCarrito methodsFor: 'as yet unclassified' stamp: 'CL 10/30/2019 16:57:27' prior: 50781761!
test06CanNotRemoveProductsThatAreNotInCart

	|aCart|
	
	aCart := Carrito createCart: aCartID.
	
	self 
		should: [aCart removeFromCart: 1 copiesOf: aBookFromTheEditorial]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText equals: Carrito canNotRemoveProductsThatAreNotInCartErrorDescription.
	self assert: aCart totalAmountOfProducts equals: 0.
	self assert: (aCart amountOfThisProduct: aBookFromTheEditorial) equals: 0.].

	! !

!methodRemoval: Carrito #totalAmountOfBooks stamp: 'CL 10/30/2019 16:57:27'!
totalAmountOfBooks
	^cartProducts inject: 0 into: [:totalAmountOfBooks :amountOfABook | totalAmountOfBooks + amountOfABook].!

----QUIT----(30 October 2019 17:01:09) CuisUniversity-3938.image priorSource: 14319118!

----STARTUP---- (30 October 2019 17:16:09) as /home/cliberman/Descargas/linux64/CuisUniversity-3938.image!


----End fileIn of /home/cliberman/Descargas/DesignPatterns-Adapter.st----!

----QUIT----(30 October 2019 18:24:10) CuisUniversity-3938.image priorSource: 14415436!

----STARTUP---- (31 October 2019 20:58:35) as /home/cliberman/Descargas/linux64/CuisUniversity-3938.image!


!classRemoval: #Carrito stamp: 'CL 10/31/2019 21:02:30'!
Object subclass: #Carrito
	instanceVariableNames: 'cartID cartProducts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #TestsCarrito stamp: 'CL 10/31/2019 21:02:31'!
TestCase subclass: #TestsCarrito
	instanceVariableNames: 'aBookFromTheEditorial aCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/cliberman/Descargas/TusLibros.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CL 10/31/2019 21:02:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CL 10/31/2019 21:02:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CL 10/31/2019 21:02:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CL 10/31/2019 21:02:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CL 10/31/2019 21:02:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CL 10/31/2019 21:02:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CL 10/31/2019 21:02:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CL 10/31/2019 21:02:55'!
PASSED!
!Cart methodsFor: 'initialization' stamp: 'CL 10/31/2019 21:03:37' prior: 50782426!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'adding' stamp: 'CL 10/31/2019 21:05:02' prior: 50782444!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items add: anItem withOccurrences: aQuantity ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CL 10/31/2019 21:05:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CL 10/31/2019 21:05:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CL 10/31/2019 21:05:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CL 10/31/2019 21:05:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CL 10/31/2019 21:05:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CL 10/31/2019 21:05:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CL 10/31/2019 21:05:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CL 10/31/2019 21:05:07'!
PASSED!
!Cart methodsFor: 'adding' stamp: 'CL 10/31/2019 21:05:27' prior: 50782607!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items add: anItem withOccurrences: aQuantity! !

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'CL 10/31/2019 21:07:07'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'nil' stamp: 'CL 10/31/2019 21:09:07'!
test01CashierCalculatesTotalPriceCorrectly! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 21:09:24'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 21:09:37'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !

!methodRemoval: CashierTest #defaultCatalog stamp: 'CL 10/31/2019 21:09:45'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!

!methodRemoval: CashierTest #createCart stamp: 'CL 10/31/2019 21:09:50'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 21:12:21' prior: 50782658!
test01CashierCalculatesTotalPriceCorrectly! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 21:13:31'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 21:13:40'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 21:13:52'!
itemSellByTheStore
	
	^ 'validBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 21:16:03' prior: 50782681!
test01CashierCalculatesTotalPriceCorrectly

	| aCart |
	aCart := self createCart.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 21:16:39' prior: 50782700!
test01CashierCalculatesTotalPriceCorrectly

	| aCart |
	aCart := self createCart.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 21:21:39' prior: 50782706!
test01CashierCalculatesTotalPriceCorrectly

	| aCart aCashier amount |
	amount := 2.
	aCart := self createCart.
	aCart add: amount of: self itemSellByTheStore.
	aCashier := self createCashier.
	self assert: (aCashier finalPrice: aCart) equals: (self priceList at: self itemSellByTheStore  * amount)	! !

!testRun: #CashierTest #test01CashierCalculatesTotalPriceCorrectly stamp: 'CL 10/31/2019 21:22:05'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 21:25:16'!
createCashier
	self shouldBeImplemented.! !

!classDefinition: #Cashier category: #TusLibros stamp: 'CL 10/31/2019 21:29:07'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 21:28:59' prior: 50782728!
createCashier
	^Cashier withPriceList: self priceList.! !

!testRun: #CashierTest #test01CashierCalculatesTotalPriceCorrectly stamp: 'CL 10/31/2019 21:29:16'!
ERROR!
!CashierTest methodsFor: 'accessing' stamp: 'CL 10/31/2019 21:29:28'!
priceList
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'accessing' stamp: 'CL 10/31/2019 21:33:04' prior: 50782747!
priceList
	^Dictionary with: self itemSellByTheStore -> 20! !

!testRun: #CashierTest #test01CashierCalculatesTotalPriceCorrectly stamp: 'CL 10/31/2019 21:33:40'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'CL 10/31/2019 21:33:52'!
withPriceList: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithPriceList: aDictionary ! !
!Cashier class methodsFor: 'instance creation' stamp: 'CL 10/31/2019 21:34:12' prior: 50782759!
withPriceList: aPricelist
	^self new initializeWithPriceList: aPricelist ! !

!testRun: #CashierTest #test01CashierCalculatesTotalPriceCorrectly stamp: 'CL 10/31/2019 21:34:14'!
ERROR!

!classDefinition: #Cashier category: #TusLibros stamp: 'CL 10/31/2019 21:34:50'!
Object subclass: #Cashier
	instanceVariableNames: 'pricelist'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'CL 10/31/2019 21:34:50'!
initializeWithPriceList: aPricelist 
	self shouldBeImplemented.
	pricelist := aPricelist.! !
!Cashier methodsFor: 'initialization' stamp: 'CL 10/31/2019 21:35:44' prior: 50782783!
initializeWithPriceList: aPricelist
	pricelist := aPricelist.! !

!testRun: #CashierTest #test01CashierCalculatesTotalPriceCorrectly stamp: 'CL 10/31/2019 21:35:48'!
ERROR!
!Cashier methodsFor: 'evaluating' stamp: 'CL 10/31/2019 21:36:04'!
finalPrice: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'evaluating' stamp: 'CL 10/31/2019 21:46:43' prior: 50782797!
finalPrice: aCart 
	^aCart obtainTotalPriceBy: self! !

!testRun: #CashierTest #test01CashierCalculatesTotalPriceCorrectly stamp: 'CL 10/31/2019 21:47:19'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 21:47:48'!
obtainTotalPriceBy: aCashier 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 21:54:29' prior: 50782810!
obtainTotalPriceBy: aCashier 
	^items inject: 0 into:[:totalPrice :item| totalPrice + aCashier obtainPriceOf: (items at: item) ofThisItem: item].! !

!testRun: #CashierTest #test01CashierCalculatesTotalPriceCorrectly stamp: 'CL 10/31/2019 21:54:33'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 21:55:05' prior: 50782815!
obtainTotalPriceBy: aCashier 
	^items inject: 0 into:[:totalPrice :item| totalPrice + (aCashier obtainPriceOf: (items at: item) ofThisItem: item)].! !

!testRun: #CashierTest #test01CashierCalculatesTotalPriceCorrectly stamp: 'CL 10/31/2019 21:55:07'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 21:56:11' prior: 50782826!
obtainTotalPriceBy: aCashier 
	^items inject: 0 into:[:totalPrice :item| totalPrice + (aCashier obtainPriceOf: (items occurrencesOf: item) ofThisItem: item)].! !

!testRun: #CashierTest #test01CashierCalculatesTotalPriceCorrectly stamp: 'CL 10/31/2019 21:56:13'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 21:56:21'!
obtainPriceOf: aSmallInteger ofThisItem: aString 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 21:57:25' prior: 50782848!
obtainPriceOf: aQuantity ofThisItem: anItem 
	^(pricelist at: anItem) * aQuantity ! !

!testRun: #CashierTest #test01CashierCalculatesTotalPriceCorrectly stamp: 'CL 10/31/2019 21:57:27'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 21:57:44' prior: 50782712!
test01CashierCalculatesTotalPriceCorrectly

	| aCart aCashier amount |
	amount := 2.
	aCart := self createCart.
	aCart add: amount of: self itemSellByTheStore.
	aCashier := self createCashier.
	self assert: (aCashier finalPrice: aCart) equals: ((self priceList at: self itemSellByTheStore)  * amount)	! !

!testRun: #CashierTest #test01CashierCalculatesTotalPriceCorrectly stamp: 'CL 10/31/2019 21:57:46'!
FAILURE!

self priceList at: self itemSellByTheStore!

 ((self priceList at: self itemSellByTheStore)  * amount)!

(aCashier finalPrice: aCart)!
!Cart methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 22:00:12' prior: 50782837!
obtainTotalPriceBy: aCashier 
	^items inject: 0 into:[:totalPrice :item| totalPrice + (aCashier obtainPriceOf: item)].! !

!testRun: #CashierTest #test01CashierCalculatesTotalPriceCorrectly stamp: 'CL 10/31/2019 22:00:18'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 22:00:26'!
obtainPriceOf: aString 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 10/31/2019 22:00:52' prior: 50782894!
obtainPriceOf: anItem 
	^pricelist at: anItem! !

!testRun: #CashierTest #test01CashierCalculatesTotalPriceCorrectly stamp: 'CL 10/31/2019 22:00:53'!
PASSED!

!testRun: #CashierTest #test01CashierCalculatesTotalPriceCorrectly stamp: 'CL 10/31/2019 22:00:53'!
PASSED!

----QUIT----(31 October 2019 22:01:18) CuisUniversity-3938.image priorSource: 14423113!

----STARTUP---- (4 November 2019 17:03:34) as /home/cliberman/Descargas/linux64/CuisUniversity-3938.image!


!methodRemoval: CashierTest #test01CashierCalculatesTotalPriceCorrectly stamp: 'CL 11/4/2019 18:46:09'!
test01CashierCalculatesTotalPriceCorrectly

	| aCart aCashier amount |
	amount := 2.
	aCart := self createCart.
	aCart add: amount of: self itemSellByTheStore.
	aCashier := self createCashier.
	self assert: (aCashier finalPrice: aCart) equals: ((self priceList at: self itemSellByTheStore)  * amount)	!

!methodRemoval: CashierTest #createCashier stamp: 'CL 11/4/2019 18:46:59'!
createCashier
	^Cashier withPriceList: self priceList.!

!classRemoval: #Cashier stamp: 'CL 11/4/2019 18:47:08'!
Object subclass: #Cashier
	instanceVariableNames: 'pricelist'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: CashierTest #priceList stamp: 'CL 11/4/2019 18:47:23'!
priceList
	^Dictionary with: self itemSellByTheStore -> 20!

!methodRemoval: CashierTest #itemSellByTheStore stamp: 'CL 11/4/2019 18:47:30'!
itemSellByTheStore
	
	^ 'validBook'!

!methodRemoval: CashierTest #defaultCatalog stamp: 'CL 11/4/2019 18:47:36'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!

Date today!

!classDefinition: #Cashier category: #TusLibros stamp: 'CL 11/4/2019 19:09:59'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:09:35'!
test01AnEmptyCartCanNotCheckout

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCreditCard := self createCreditCard.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	aDate := Date today.
	
	self 
		should:[aCashier checksumOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anEmptyCartCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]! !

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/4/2019 19:10:10'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'CL 11/4/2019 19:11:14' prior: 50782560!
createCart
	
	^Cart acceptingItemsOf: self defaultPriceList! !
!CartTest methodsFor: 'support' stamp: 'CL 11/4/2019 19:12:12'!
defaultPriceList
	
	^ Dictionary with: self itemSellByTheStore -> self defaultPrice! !
!CartTest methodsFor: 'support' stamp: 'CL 11/4/2019 19:12:27'!
defaultPrice

	^20! !

!methodRemoval: CartTest #defaultCatalog stamp: 'CL 11/4/2019 19:13:24'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:13:34' prior: 50782685!
createCart
	
	^Cart acceptingItemsOf: self defaultPriceList! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:13:46'!
defaultPrice

	^20! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:13:57'!
defaultPriceList
	
	^ Dictionary with: self itemSellByTheStore -> self defaultPrice! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:14:13'!
itemSellByTheStore
	
	^ 'validBook'! !

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/4/2019 19:14:18'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:14:33'!
createCreditCard
	self shouldBeImplemented.! !

December/2019!

!classDefinition: #CreditCard category: #TusLibros stamp: 'CL 11/4/2019 19:25:38'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:25:33' prior: 50783020!
createCreditCard
	^CreditCard withNumber: 1 withOwner: 'defaultOwnerName' withExpDate: self defaultDate.! !

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/4/2019 19:25:52'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:26:02'!
defaultDate
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:26:12' prior: 50783041!
defaultDate
	^(GregorianMonthOfYear yearNumber: 2019 month: December)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:26:23' prior: 50783046!
defaultDate
	^(GregorianMonthOfYear yearNumber: 2019 monthNumber: 12)! !

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/4/2019 19:26:25'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'CL 11/4/2019 19:28:03'!
withNumber: aSmallInteger withOwner: aString withExpDate: aGregorianMonthOfYear 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aSmallInteger withOwner: aString withExpDate: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'CL 11/4/2019 19:28:16' prior: 50783060!
withNumber: aSmallInteger withOwner: aString withExpDate: aGregorianMonthOfYear 

	^self new initializeWithNumber: aSmallInteger withOwner: aString withExpDate: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'CL 11/4/2019 19:29:48' prior: 50783072!
withNumber: anID withOwner: anOwnerName withExpDate: anExpirationDate 

	^self new initializeWithID: anID withOwner: anOwnerName withExpDate: anExpirationDate ! !

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/4/2019 19:29:53'!
ERROR!

!classDefinition: #CreditCard category: #TusLibros stamp: 'CL 11/4/2019 19:30:22'!
Object subclass: #CreditCard
	instanceVariableNames: 'iD'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'CL 11/4/2019 19:30:22'!
Object subclass: #CreditCard
	instanceVariableNames: 'iD ownerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'CL 11/4/2019 19:30:22'!
Object subclass: #CreditCard
	instanceVariableNames: 'iD ownerName expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'CL 11/4/2019 19:30:22'!
initializeWithID: anID withOwner: anOwnerName withExpDate: anExpirationDate 
	self shouldBeImplemented.
	iD := anID.
	ownerName := anOwnerName.
	expirationDate := anExpirationDate.! !
!CreditCard methodsFor: 'initialization' stamp: 'CL 11/4/2019 19:30:33' prior: 50783113!
initializeWithID: anID withOwner: anOwnerName withExpDate: anExpirationDate
	iD := anID.
	ownerName := anOwnerName.
	expirationDate := anExpirationDate.! !

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/4/2019 19:30:36'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:30:51'!
createSalesBook
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:31:13' prior: 50783133!
createSalesBook
	^OrderedCollection new.! !

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/4/2019 19:31:18'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:31:44'!
createCashierWith: anOrderedCollection 
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:32:33' prior: 50783145!
createCashierWith: aSalesBook
	^Cashier with: aSalesBook. 
	! !

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/4/2019 19:32:35'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'CL 11/4/2019 19:32:49'!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'CL 11/4/2019 19:33:09' prior: 50783159!
with: aSalesBook 
	
	^self new initializeWith: aSalesBook. ! !

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/4/2019 19:33:10'!
ERROR!

!classDefinition: #Cashier category: #TusLibros stamp: 'CL 11/4/2019 19:33:27'!
Object subclass: #Cashier
	instanceVariableNames: 'salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'CL 11/4/2019 19:33:27'!
initializeWith: aSalesBook 
	self shouldBeImplemented.
	salesBook := aSalesBook.! !
!Cashier methodsFor: 'initialization' stamp: 'CL 11/4/2019 19:33:38' prior: 50783182!
initializeWith: aSalesBook 
	salesBook := aSalesBook.! !

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/4/2019 19:33:40'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:34:08'!
checksumOf: aCart withCC: aCreditCard andDate: aDate 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:36:36' prior: 50783196!
checksumOf: aCart withCC: aCreditCard andDate: aDate 
	
	^self error: self class anEmptyCartCanNotCheckoutErrorDescription ! !

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/4/2019 19:36:38'!
ERROR!
!Cashier class methodsFor: 'errors' stamp: 'CL 11/4/2019 19:36:55'!
anEmptyCartCanNotCheckoutErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'errors' stamp: 'CL 11/4/2019 19:37:31' prior: 50783212!
anEmptyCartCanNotCheckoutErrorDescription
	^'No se puede cobrar a un carrito vacio'! !

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/4/2019 19:37:33'!
PASSED!

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/4/2019 19:37:33'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:39:30'!
test02CashierCheckoutsCartWithOneElementCorrectly

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCreditCard := self createCreditCard.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	aDate := self defaultDate.
	
	self 
		should:[aCashier checksumOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anEmptyCartCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:39:52'!
defaultMonthOfYear
	^(GregorianMonthOfYear yearNumber: 2019 monthNumber: 12)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:41:31' prior: 50783052!
defaultDate
	^FixedGregorianDate today! !

FixedGregorianDate today!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:42:18' prior: 50783255!
defaultDate
	^FixedGregorianDate today! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:42:25' prior: 50783249!
defaultMonthOfYear
	^FixedGregorianDate today monthOfYear! !

FixedGregorianDate today monthOfYear!

FixedGregorianDate today monthOfYear next !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:43:33' prior: 50783266!
defaultMonthOfYear
	^FixedGregorianDate today monthOfYear next! !

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/4/2019 19:43:53'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:44:30'!
today
	^FixedGregorianDate today! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:44:30' prior: 50783229!
test02CashierCheckoutsCartWithOneElementCorrectly

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCreditCard := self createCreditCard.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	aDate := self today.
	
	self 
		should:[aCashier checksumOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anEmptyCartCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:44:30' prior: 50783032!
createCreditCard
	^CreditCard withNumber: 1 withOwner: 'defaultOwnerName' withExpDate: self today.! !

!methodRemoval: CashierTest #defaultDate stamp: 'CL 11/4/2019 19:44:30'!
defaultDate
	^FixedGregorianDate today!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:45:02'!
NextMonthOfYearFromToday
	^FixedGregorianDate today monthOfYear next! !

!methodRemoval: CashierTest #defaultMonthOfYear stamp: 'CL 11/4/2019 19:45:02'!
defaultMonthOfYear
	^FixedGregorianDate today monthOfYear next!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:45:49'!
validExpirationDateFromToday
	^FixedGregorianDate today monthOfYear next! !

!methodRemoval: CashierTest #NextMonthOfYearFromToday stamp: 'CL 11/4/2019 19:45:49'!
NextMonthOfYearFromToday
	^FixedGregorianDate today monthOfYear next!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:46:41'!
createCreditCardValidForToday
	^CreditCard withNumber: 1 withOwner: 'defaultOwnerName' withExpDate: self today.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:46:41' prior: 50783287!
test02CashierCheckoutsCartWithOneElementCorrectly

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCreditCard := self createCreditCardValidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	aDate := self today.
	
	self 
		should:[aCashier checksumOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anEmptyCartCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:46:41' prior: 50782958!
test01AnEmptyCartCanNotCheckout

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCreditCard := self createCreditCardValidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	aDate := Date today.
	
	self 
		should:[aCashier checksumOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anEmptyCartCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]! !

!methodRemoval: CashierTest #createCreditCard stamp: 'CL 11/4/2019 19:46:41'!
createCreditCard
	^CreditCard withNumber: 1 withOwner: 'defaultOwnerName' withExpDate: self today.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:46:55' prior: 50783366!
test01AnEmptyCartCanNotCheckout

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCreditCard := self createCreditCardValidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	aDate := self today.
	
	self 
		should:[aCashier checksumOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anEmptyCartCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]! !

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/4/2019 19:46:58'!
PASSED!

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/4/2019 19:46:58'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutsCartWithOneElementCorrectly stamp: 'CL 11/4/2019 19:46:58'!
PASSED!

!methodRemoval: CashierTest #test02CashierCheckoutsCartWithOneElementCorrectly stamp: 'CL 11/4/2019 19:47:31'!
test02CashierCheckoutsCartWithOneElementCorrectly

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCreditCard := self createCreditCardValidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	aDate := self today.
	
	self 
		should:[aCashier checksumOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anEmptyCartCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:52:09'!
test02CashierCheckoutsCartWithOneItemCorrectly

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aDate := self today.
	aCreditCard := self createCreditCardValidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	
	aCart add: self itemSellByTheStore.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:52:34'!
checkoutOf: aCart withCC: aCreditCard andDate: aDate 
	
	^self error: self class anEmptyCartCanNotCheckoutErrorDescription ! !

!methodRemoval: Cashier #checksumOf:withCC:andDate: stamp: 'CL 11/4/2019 19:52:34'!
checksumOf: aCart withCC: aCreditCard andDate: aDate 
	
	^self error: self class anEmptyCartCanNotCheckoutErrorDescription !
!CreditCard class methodsFor: 'instance creation' stamp: 'CL 11/4/2019 19:53:15'!
withID: anID withOwner: anOwnerName withExpDate: anExpirationDate 

	^self new initializeWithID: anID withOwner: anOwnerName withExpDate: anExpirationDate ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:53:15' prior: 50783338!
createCreditCardValidForToday
	^CreditCard withID: 1 withOwner: 'defaultOwnerName' withExpDate: self today.! !

!methodRemoval: CreditCard class #withNumber:withOwner:withExpDate: stamp: 'CL 11/4/2019 19:53:15'!
withNumber: anID withOwner: anOwnerName withExpDate: anExpirationDate 

	^self new initializeWithID: anID withOwner: anOwnerName withExpDate: anExpirationDate !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 19:53:31' prior: 50783392!
test01AnEmptyCartCanNotCheckout

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCreditCard := self createCreditCardValidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	aDate := self today.
	
	self 
		should:[aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anEmptyCartCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:03:06' prior: 50783443!
test02CashierCheckoutsCartWithOneItemCorrectly

	| aCart aCashier aCreditCard aDate aSalesBook totalPrice |
	aCart := self createCart.
	aDate := self today.
	aCreditCard := self createCreditCardValidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	
	aCart add: self itemSellByTheStore.
	totalPrice := aCashier checkoutOf: aCart withCC: aCreditCard andDate: aDate.
	self assert: (aSalesBook atEnd) equals: totalPrice.
	self assert: aCart isEmpty.! !

!testRun: #CashierTest #test02CashierCheckoutsCartWithOneItemCorrectly stamp: 'CL 11/4/2019 20:03:12'!
ERROR!

!classDefinition: #Cart category: #TusLibros stamp: 'CL 11/4/2019 20:04:06'!
Object subclass: #Cart
	instanceVariableNames: 'priceList items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:04:06' prior: 50782602!
initializeAcceptingItemsOf: aCatalog

	priceList := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:04:06' prior: 50782413!
assertIsValidItem: anItem

	(priceList includes: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'CL 11/4/2019 20:04:23' prior: 50783542!
initializeAcceptingItemsOf: aPriceList

	priceList := aPriceList.
	items := Bag new.! !
!Cart class methodsFor: 'instance creation' stamp: 'CL 11/4/2019 20:04:31' prior: 50782464!
acceptingItemsOf: aPriceList

	^self new initializeAcceptingItemsOf: aPriceList ! !

!testRun: #CashierTest #test02CashierCheckoutsCartWithOneItemCorrectly stamp: 'CL 11/4/2019 20:05:56'!
ERROR!

!testRun: #CashierTest #test02CashierCheckoutsCartWithOneItemCorrectly stamp: 'CL 11/4/2019 20:05:56'!
ERROR!

priceList!

anItem!

priceList includes: anItem!
!Cart methodsFor: 'assertions' stamp: 'CL 11/4/2019 20:07:02' prior: 50783548!
assertIsValidItem: anItem

	(priceList includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CashierTest #test02CashierCheckoutsCartWithOneItemCorrectly stamp: 'CL 11/4/2019 20:07:04'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:08:29' prior: 50783456!
checkoutOf: aCart withCC: aCreditCard andDate: aDate 
	
	aCart isEmpty ifTrue: [^self error: self class anEmptyCartCanNotCheckoutErrorDescription].
	^aCart totalPrice! !

!testRun: #CashierTest #test02CashierCheckoutsCartWithOneItemCorrectly stamp: 'CL 11/4/2019 20:08:32'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:08:54'!
totalPrice
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:10:25' prior: 50783597!
totalPrice
	^items inject: 0 into:[:totalPrice :item| totalPrice + (priceList at: item)] ! !

!testRun: #CashierTest #test02CashierCheckoutsCartWithOneItemCorrectly stamp: 'CL 11/4/2019 20:10:28'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:11:42' prior: 50783513!
test02CashierCheckoutsCartWithOneItemCorrectly

	| aCart aCashier aCreditCard aDate aSalesBook totalPrice |
	aCart := self createCart.
	aDate := self today.
	aCreditCard := self createCreditCardValidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	
	aCart add: self itemSellByTheStore.
	totalPrice := aCashier checkoutOf: aCart withCC: aCreditCard andDate: aDate.
	self assert: (aSalesBook last) equals: totalPrice.
	self assert: aCart isEmpty.! !

!testRun: #CashierTest #test02CashierCheckoutsCartWithOneItemCorrectly stamp: 'CL 11/4/2019 20:11:45'!
ERROR!

self createSalesBook!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:13:51' prior: 50783585!
checkoutOf: aCart withCC: aCreditCard andDate: aDate 
	
	| totalPrice |
	aCart isEmpty ifTrue: [^self error: self class anEmptyCartCanNotCheckoutErrorDescription].
	aCart emptyCart.
	totalPrice := aCart totalPrice.
	salesBook addLast: totalPrice.
	^totalPrice! !

!testRun: #CashierTest #test02CashierCheckoutsCartWithOneItemCorrectly stamp: 'CL 11/4/2019 20:13:58'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:14:07'!
emptyCart
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:14:45' prior: 50783649!
emptyCart
	items := OrderedCollection new.! !

!testRun: #CashierTest #test02CashierCheckoutsCartWithOneItemCorrectly stamp: 'CL 11/4/2019 20:14:48'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutsCartWithOneItemCorrectly stamp: 'CL 11/4/2019 20:14:57'!
PASSED!

!methodRemoval: Cart #obtainTotalPriceBy: stamp: 'CL 11/4/2019 20:17:23'!
obtainTotalPriceBy: aCashier 
	^items inject: 0 into:[:totalPrice :item| totalPrice + (aCashier obtainPriceOf: item)].!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:21:07'!
test03AnInvalidCreditCardCanNotCheckout

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCreditCard := self createCreditCardInvalidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	aDate := self today.
	
	self 
		should:[aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anInvalidCreditCardCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]! !

!testRun: #CashierTest #test03AnInvalidCreditCardCanNotCheckout stamp: 'CL 11/4/2019 20:21:12'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:21:24'!
createCreditCardInvalidForToday
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:22:31' prior: 50783478!
createCreditCardValidForToday
	^CreditCard withID: 1 withOwner: 'defaultOwnerName' withExpDate: self validExpirationDateFromToday.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:22:41' prior: 50783694!
createCreditCardInvalidForToday
	^CreditCard withID: 1 withOwner: 'defaultOwnerName' withExpDate: self invalidExpirationDateFromToday.! !

!testRun: #CashierTest #test03AnInvalidCreditCardCanNotCheckout stamp: 'CL 11/4/2019 20:22:47'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:22:56'!
invalidExpirationDateFromToday
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:23:20' prior: 50783718!
invalidExpirationDateFromToday
	^FixedGregorianDate today monthOfYear previous! !

FixedGregorianDate today monthOfYear previous!

!testRun: #CashierTest #test03AnInvalidCreditCardCanNotCheckout stamp: 'CL 11/4/2019 20:23:32'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:23:49'!
anInvalidCreditCardCanNotCheckoutErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:24:10' prior: 50783733!
anInvalidCreditCardCanNotCheckoutErrorDescription
	^'La tarjeta esta vencida'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:24:44' prior: 50783739!
anInvalidCreditCardCanNotCheckoutErrorDescription
	^'No se puede cobrar a una tarjeta vencida'! !

!testRun: #CashierTest #test03AnInvalidCreditCardCanNotCheckout stamp: 'CL 11/4/2019 20:24:47'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:25:56' prior: 50783670!
test03AnInvalidCreditCardCanNotCheckout

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCreditCard := self createCreditCardInvalidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	aDate := self today.
	
	self 
		should:[aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anInvalidCreditCardCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]! !

!testRun: #CashierTest #test03AnInvalidCreditCardCanNotCheckout stamp: 'CL 11/4/2019 20:25:58'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:27:34' prior: 50783635!
checkoutOf: aCart withCC: aCreditCard andDate: aDate 
	
	| totalPrice |
	aCart isEmpty ifTrue: [^self error: self class anEmptyCartCanNotCheckoutErrorDescription].
	(aCreditCard hasExpiredBy: aDate) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	aCart emptyCart.
	totalPrice := aCart totalPrice.
	salesBook addLast: totalPrice.
	^totalPrice! !

!testRun: #CashierTest #test03AnInvalidCreditCardCanNotCheckout stamp: 'CL 11/4/2019 20:27:38'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:27:51'!
hasExpiredBy: aFixedGregorianDate 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:29:10' prior: 50783798!
hasExpiredBy: aDate 
	^expirationDate < aDate monthOfYear.! !

!testRun: #CashierTest #test03AnInvalidCreditCardCanNotCheckout stamp: 'CL 11/4/2019 20:29:13'!
PASSED!

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/4/2019 20:29:13'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutsCartWithOneItemCorrectly stamp: 'CL 11/4/2019 20:29:13'!
PASSED!

!testRun: #CashierTest #test03AnInvalidCreditCardCanNotCheckout stamp: 'CL 11/4/2019 20:29:13'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:30:29'!
test02CashierCheckoutsValidCartCorrectly

	| aCart aCashier aCreditCard aDate aSalesBook totalPrice |
	aCart := self createCart.
	aDate := self today.
	aCreditCard := self createCreditCardValidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	
	aCart add: self itemSellByTheStore.
	totalPrice := aCashier checkoutOf: aCart withCC: aCreditCard andDate: aDate.
	self assert: (aSalesBook last) equals: totalPrice.
	self assert: aCart isEmpty.! !

!methodRemoval: CashierTest #test02CashierCheckoutsCartWithOneItemCorrectly stamp: 'CL 11/4/2019 20:30:29'!
test02CashierCheckoutsCartWithOneItemCorrectly

	| aCart aCashier aCreditCard aDate aSalesBook totalPrice |
	aCart := self createCart.
	aDate := self today.
	aCreditCard := self createCreditCardValidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	
	aCart add: self itemSellByTheStore.
	totalPrice := aCashier checkoutOf: aCart withCC: aCreditCard andDate: aDate.
	self assert: (aSalesBook last) equals: totalPrice.
	self assert: aCart isEmpty.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:48:27'!
test0xCheckoutDoesNotCompleteWhenInterfaceReturnsError

	| aCart aCashier aCreditCard aDate aSalesBook totalPrice |
	aCart := self createCart.
	aDate := self today.
	aCreditCard := self createInvalidCreditCardForInteface.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	
	aCart add: self itemSellByTheStore.
	totalPrice := aCashier checkoutOf: aCart withCC: aCreditCard andDate: aDate.
	self assert: (aSalesBook last) equals: totalPrice.
	self assert: aCart isEmpty.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:49:21'!
test03AnExpiredCreditCardCanNotCheckout

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCreditCard := self createCreditCardInvalidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	aDate := self today.
	
	self 
		should:[aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anInvalidCreditCardCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]! !

!methodRemoval: CashierTest #test03AnInvalidCreditCardCanNotCheckout stamp: 'CL 11/4/2019 20:49:21'!
test03AnInvalidCreditCardCanNotCheckout

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCreditCard := self createCreditCardInvalidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	aDate := self today.
	
	self 
		should:[aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anInvalidCreditCardCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:54:08'!
test04ACreditCardWithExceedingAmountOfDigitsCanNotCheckout

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCreditCard := self createCreditCardWithInvalidUserName.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	aDate := self today.
	
	self 
		should:[aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anInvalidCreditCardCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]! !

!testRun: #CashierTest #test04ACreditCardWithExceedingAmountOfDigitsCanNotCheckout stamp: 'CL 11/4/2019 20:54:08'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:54:15'!
createCreditCardWithInvalidUserName
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:56:04' prior: 50783947!
createCreditCardWithInvalidUserName
	^CreditCard withID: 1 withOwner: 'OwnerNameWithExceedingAmountOfL' withExpDate: self validExpirationDateFromToday.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:57:49'!
createCreditCardWithInvalidID
	^CreditCard withID: '1000000000000000' withOwner: 'defaultOwnerName' withExpDate: self validExpirationDateFromToday.! !

!testRun: #CashierTest #test04ACreditCardWithExceedingAmountOfDigitsCanNotCheckout stamp: 'CL 11/4/2019 20:58:00'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:59:28' prior: 50783780!
checkoutOf: aCart withCC: aCreditCard andDate: aDate 
	
	| totalPrice |
	aCart isEmpty ifTrue: [^self error: self class anEmptyCartCanNotCheckoutErrorDescription].
	(aCreditCard hasExpiredBy: aDate) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isValidName: aCreditCard name) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	aCart emptyCart.
	totalPrice := aCart totalPrice.
	salesBook addLast: totalPrice.
	^totalPrice! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 20:59:52' prior: 50783973!
checkoutOf: aCart withCC: aCreditCard andDate: aDate 
	
	| totalPrice |
	aCart isEmpty ifTrue: [^self error: self class anEmptyCartCanNotCheckoutErrorDescription].
	(aCreditCard hasExpiredBy: aDate) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isValidName: aCreditCard OwnerName) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	aCart emptyCart.
	totalPrice := aCart totalPrice.
	salesBook addLast: totalPrice.
	^totalPrice! !

!testRun: #CashierTest #test04ACreditCardWithExceedingAmountOfDigitsCanNotCheckout stamp: 'CL 11/4/2019 20:59:55'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:00:10'!
OwnerName
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:00:20' prior: 50784015!
OwnerName
	^ownerName ! !

!testRun: #CashierTest #test04ACreditCardWithExceedingAmountOfDigitsCanNotCheckout stamp: 'CL 11/4/2019 21:00:25'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:00:34'!
isValidName: aString 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:01:06' prior: 50784027!
isValidName: aName

	^aName size < 31! !

!testRun: #CashierTest #test04ACreditCardWithExceedingAmountOfDigitsCanNotCheckout stamp: 'CL 11/4/2019 21:01:34'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:01:57'!
isInvalidName: aName

	^aName size < 31! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:01:57' prior: 50783992!
checkoutOf: aCart withCC: aCreditCard andDate: aDate 
	
	| totalPrice |
	aCart isEmpty ifTrue: [^self error: self class anEmptyCartCanNotCheckoutErrorDescription].
	(aCreditCard hasExpiredBy: aDate) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isInvalidName: aCreditCard OwnerName) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	aCart emptyCart.
	totalPrice := aCart totalPrice.
	salesBook addLast: totalPrice.
	^totalPrice! !

!methodRemoval: Cashier #isValidName: stamp: 'CL 11/4/2019 21:01:57'!
isValidName: aName

	^aName size < 31!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:02:08' prior: 50784040!
isInvalidName: aName

	^aName size > 30! !

!testRun: #CashierTest #test04ACreditCardWithExceedingAmountOfDigitsCanNotCheckout stamp: 'CL 11/4/2019 21:02:22'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:02:56'!
test04ACreditCardWithExceedingAmountOfLetersInOwnersNameCanNotCheckout

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCreditCard := self createCreditCardWithInvalidUserName.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	aDate := self today.
	
	self 
		should:[aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anInvalidCreditCardCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]! !

!methodRemoval: CashierTest #test04ACreditCardWithExceedingAmountOfDigitsCanNotCheckout stamp: 'CL 11/4/2019 21:02:56'!
test04ACreditCardWithExceedingAmountOfDigitsCanNotCheckout

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCreditCard := self createCreditCardWithInvalidUserName.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	aDate := self today.
	
	self 
		should:[aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anInvalidCreditCardCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:03:29'!
test05ACreditCardWithExceedingAmountOfDigitsInIDCanNotCheckout

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCreditCard := self createCreditCardWithInvalidID.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	aDate := self today.
	
	self 
		should:[aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anInvalidCreditCardCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]! !

!testRun: #CashierTest #test05ACreditCardWithExceedingAmountOfDigitsInIDCanNotCheckout stamp: 'CL 11/4/2019 21:03:34'!
FAILURE!

!testRun: #CashierTest #test05ACreditCardWithExceedingAmountOfDigitsInIDCanNotCheckout stamp: 'CL 11/4/2019 21:03:34'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:04:33' prior: 50784045!
checkoutOf: aCart withCC: aCreditCard andDate: aDate 
	
	| totalPrice |
	aCart isEmpty ifTrue: [^self error: self class anEmptyCartCanNotCheckoutErrorDescription].
	(aCreditCard hasExpiredBy: aDate) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isInvalidName: aCreditCard OwnerName) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isInvalidID: aCreditCard cardID) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	aCart emptyCart.
	totalPrice := aCart totalPrice.
	salesBook addLast: totalPrice.
	^totalPrice! !

!testRun: #CashierTest #test05ACreditCardWithExceedingAmountOfDigitsInIDCanNotCheckout stamp: 'CL 11/4/2019 21:04:38'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:04:45'!
cardID
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:04:56' prior: 50784180!
cardID
	^iD! !

!testRun: #CashierTest #test05ACreditCardWithExceedingAmountOfDigitsInIDCanNotCheckout stamp: 'CL 11/4/2019 21:04:59'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:05:05'!
isInvalidID: aString 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:05:27' prior: 50784192!
isInvalidID: anID 
	^anID size > 15! !

!testRun: #CashierTest #test05ACreditCardWithExceedingAmountOfDigitsInIDCanNotCheckout stamp: 'CL 11/4/2019 21:05:28'!
PASSED!

!testRun: #CashierTest #test05ACreditCardWithExceedingAmountOfDigitsInIDCanNotCheckout stamp: 'CL 11/4/2019 21:05:33'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:05:41'!
test06CheckoutDoesNotCompleteWhenInterfaceReturnsError

	| aCart aCashier aCreditCard aDate aSalesBook totalPrice |
	aCart := self createCart.
	aDate := self today.
	aCreditCard := self createInvalidCreditCardForInteface.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	
	aCart add: self itemSellByTheStore.
	totalPrice := aCashier checkoutOf: aCart withCC: aCreditCard andDate: aDate.
	self assert: (aSalesBook last) equals: totalPrice.
	self assert: aCart isEmpty.! !

!methodRemoval: CashierTest #test0xCheckoutDoesNotCompleteWhenInterfaceReturnsError stamp: 'CL 11/4/2019 21:05:41'!
test0xCheckoutDoesNotCompleteWhenInterfaceReturnsError

	| aCart aCashier aCreditCard aDate aSalesBook totalPrice |
	aCart := self createCart.
	aDate := self today.
	aCreditCard := self createInvalidCreditCardForInteface.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	
	aCart add: self itemSellByTheStore.
	totalPrice := aCashier checkoutOf: aCart withCC: aCreditCard andDate: aDate.
	self assert: (aSalesBook last) equals: totalPrice.
	self assert: aCart isEmpty.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:06:26'!
createInvalidCreditCardForInteface
	^CreditCard withID: 1 withOwner: 'InvalidNameForInteface' withExpDate: self validExpirationDateFromToday.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:06:58' prior: 50784209!
test06CheckoutDoesNotCompleteWhenInterfaceReturnsError

	| aCart aCashier aCreditCard aDate aSalesBook totalPrice |
	aCart := self createCart.
	aDate := self today.
	aCreditCard := self createInvalidCreditCardForInteface.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	
	self 
		should:[aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anInvalidCreditCardCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:07:16' prior: 50784255!
test06CheckoutDoesNotCompleteWhenInterfaceReturnsError

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aDate := self today.
	aCreditCard := self createInvalidCreditCardForInteface.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	
	self 
		should:[aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anInvalidCreditCardCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]! !

!testRun: #CashierTest #test06CheckoutDoesNotCompleteWhenInterfaceReturnsError stamp: 'CL 11/4/2019 21:12:40'!
FAILURE!

!testRun: #CashierTest #test06CheckoutDoesNotCompleteWhenInterfaceReturnsError stamp: 'CL 11/4/2019 21:13:04'!
FAILURE!

!classDefinition: #MPRestInterfaceSimulator category: #TusLibros stamp: 'CL 11/4/2019 21:18:54'!
Object subclass: #MPRestInterfaceSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:18:44' prior: 50784277!
test06CheckoutDoesNotCompleteWhenInterfaceReturnsError

	| aCart aCashier aCreditCard aDate aSalesBook aMPRestInterface |
	aCart := self createCart.
	aDate := self today.
	aCreditCard := self createInvalidCreditCardForInteface.
	aSalesBook := self createSalesBook.
	aMPRestInterface := MPRestInterfaceSimulator new.
	aCashier := self createCashierWithSalesBook: aSalesBook andMPRI: aMPRestInterface.
	
	self 
		should:[aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anInvalidCreditCardCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:19:46' prior: 50784314!
test06CheckoutDoesNotCompleteWhenInterfaceReturnsError

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aDate := self today.
	aCreditCard := self createInvalidCreditCardForInteface.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	
	self 
		should:[aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anInvalidCreditCardCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:20:47' prior: 50783151!
createCashierWith: aSalesBook
	^Cashier withSalesBook: aSalesBook andMPRI: MPRestInterfaceSimulator new.! !
!Cashier class methodsFor: 'instance creation' stamp: 'CL 11/4/2019 21:21:52'!
withSalesBook: aSalesBook andMPRI: aMPRI
	
	^self new initializeWithSalesBook: aSalesBook andMPRI: aMPRI! !

!classDefinition: #Cashier category: #TusLibros stamp: 'CL 11/4/2019 21:24:08'!
Object subclass: #Cashier
	instanceVariableNames: 'salesBook mpri'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'CL 11/4/2019 21:24:03'!
initializeWithSalesBook: aSalesBook andMPRI: aMPRI
	salesBook := aSalesBook.
	mpri := aMPRI.! !

!testRun: #CashierTest #test06CheckoutDoesNotCompleteWhenInterfaceReturnsError stamp: 'CL 11/4/2019 21:24:58'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:25:23' prior: 50784339!
test06CheckoutDoesNotCompleteWhenInterfaceReturnsError

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCart add: self itemSellByTheStore .
	aDate := self today.
	aCreditCard := self createInvalidCreditCardForInteface.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	
	self 
		should:[aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: Cashier anInvalidCreditCardCanNotCheckoutErrorDescription.
			self assert: aSalesBook isEmpty]! !

!testRun: #CashierTest #test06CheckoutDoesNotCompleteWhenInterfaceReturnsError stamp: 'CL 11/4/2019 21:25:26'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:25:56' prior: 50784247!
createInvalidCreditCardForInteface
	^CreditCard withID: '1' withOwner: 'InvalidNameForInteface' withExpDate: self validExpirationDateFromToday.! !

!testRun: #CashierTest #test06CheckoutDoesNotCompleteWhenInterfaceReturnsError stamp: 'CL 11/4/2019 21:25:59'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:34:13' prior: 50784153!
checkoutOf: aCart withCC: aCreditCard andDate: aDate 
	
	| totalPrice mpriResponse |
	aCart isEmpty ifTrue: [^self error: self class anEmptyCartCanNotCheckoutErrorDescription].
	(aCreditCard hasExpiredBy: aDate) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isInvalidName: aCreditCard OwnerName) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isInvalidID: aCreditCard cardID) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	totalPrice := aCart totalPrice.
	mpriResponse := mpri charge: totalPrice on: aCreditCard.
	(mpriResponse paymentWasUsuccessful) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	aCart emptyCart.
	
	salesBook addLast: totalPrice.
	^totalPrice! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:40:21' prior: 50784429!
checkoutOf: aCart withCC: aCreditCard andDate: aDate 
	
	| totalPrice |
	aCart isEmpty ifTrue: [^self error: self class anEmptyCartCanNotCheckoutErrorDescription].
	(aCreditCard hasExpiredBy: aDate) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isInvalidName: aCreditCard OwnerName) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isInvalidID: aCreditCard cardID) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	totalPrice := aCart totalPrice.
	mpri charge: totalPrice on: aCreditCard.
	aCart emptyCart.
	
	salesBook addLast: totalPrice.
	^totalPrice! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:40:44' prior: 50784458!
checkoutOf: aCart withCC: aCreditCard andDate: aDate 
	
	| totalPrice |
	aCart isEmpty ifTrue: [^self error: self class anEmptyCartCanNotCheckoutErrorDescription].
	(aCreditCard hasExpiredBy: aDate) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isInvalidName: aCreditCard OwnerName) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isInvalidID: aCreditCard cardID) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	totalPrice := aCart totalPrice.
	mpri charge: totalPrice on: aCreditCard.
	aCart emptyCart.
	salesBook addLast: totalPrice.
	^totalPrice! !

!testRun: #CashierTest #test06CheckoutDoesNotCompleteWhenInterfaceReturnsError stamp: 'CL 11/4/2019 21:40:45'!
ERROR!
!MPRestInterfaceSimulator methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:40:53'!
charge: aSmallInteger on: aCreditCard 
	self shouldBeImplemented.! !
!MPRestInterfaceSimulator methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:47:09' prior: 50784511!
charge: anAmountToCharge on: aCreditCard 
	(self isStolen: aCreditCard) ifTrue:[self error]! !

!testRun: #CashierTest #test06CheckoutDoesNotCompleteWhenInterfaceReturnsError stamp: 'CL 11/4/2019 21:47:17'!
ERROR!
!MPRestInterfaceSimulator methodsFor: 'as yet unclassified' stamp: 'CL 11/4/2019 21:47:32'!
isStolen: aCreditCard 
	self shouldBeImplemented.! !

----QUIT----(4 November 2019 21:47:57) CuisUniversity-3938.image priorSource: 14440298!

----STARTUP---- (6 November 2019 16:28:07) as /home/cliberman/Descargas/linux64/CuisUniversity-3938.image!

!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:29:59' prior: 50784390!
test06CheckoutDoesNotCompleteWhenInterfaceReturnsError

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCart add: self itemSellByTheStore .
	aDate := self today.
	aCreditCard := self createInvalidCreditCardForInteface.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.

	
	self 
		should:[aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: 'La tarjeta no tiene fondos suficientes'.
			self assert: aSalesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:31:05' prior: 50784538!
test06CheckoutDoesNotCompleteWhenInterfaceReturnsError

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCart add: self itemSellByTheStore .
	aDate := self today.
	aCreditCard := self createCreditCardValidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.

	
	self 
		should:[aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: 'La tarjeta no tiene fondos suficientes'.
			self assert: aSalesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:31:21' prior: 50784361!
createCashierWith: aSalesBook
	^Cashier withSalesBook: aSalesBook andMPRI: self.! !

!testRun: #CashierTest #test06CheckoutDoesNotCompleteWhenInterfaceReturnsError stamp: 'CL 11/6/2019 16:31:36'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:31:59' prior: 50783707!
createCreditCardInvalidForToday
	^CreditCard withID: '1' withOwner: 'defaultOwnerName' withExpDate: self invalidExpirationDateFromToday.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:32:04' prior: 50783699!
createCreditCardValidForToday
	^CreditCard withID: '1' withOwner: 'defaultOwnerName' withExpDate: self validExpirationDateFromToday.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:32:12' prior: 50783953!
createCreditCardWithInvalidUserName
	^CreditCard withID: '1' withOwner: 'OwnerNameWithExceedingAmountOfL' withExpDate: self validExpirationDateFromToday.! !

!methodRemoval: CashierTest #createInvalidCreditCardForInteface stamp: 'CL 11/6/2019 16:32:25'!
createInvalidCreditCardForInteface
	^CreditCard withID: '1' withOwner: 'InvalidNameForInteface' withExpDate: self validExpirationDateFromToday.!

!testRun: #CashierTest #test06CheckoutDoesNotCompleteWhenInterfaceReturnsError stamp: 'CL 11/6/2019 16:32:31'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:32:40'!
charge: aSmallInteger on: aCreditCard 
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:33:58' prior: 50784627!
charge: aTotalPrice on: aCreditCard 
	^self error: 'La tarjeta no tiene fondos suficientes'! !

!testRun: #CashierTest #test06CheckoutDoesNotCompleteWhenInterfaceReturnsError stamp: 'CL 11/6/2019 16:34:00'!
PASSED!

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/6/2019 16:34:00'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutsValidCartCorrectly stamp: 'CL 11/6/2019 16:34:00'!
ERROR!

!testRun: #CashierTest #test03AnExpiredCreditCardCanNotCheckout stamp: 'CL 11/6/2019 16:34:00'!
PASSED!

!testRun: #CashierTest #test04ACreditCardWithExceedingAmountOfLetersInOwnersNameCanNotCheckout stamp: 'CL 11/6/2019 16:34:00'!
PASSED!

!testRun: #CashierTest #test05ACreditCardWithExceedingAmountOfDigitsInIDCanNotCheckout stamp: 'CL 11/6/2019 16:34:00'!
PASSED!

!testRun: #CashierTest #test06CheckoutDoesNotCompleteWhenInterfaceReturnsError stamp: 'CL 11/6/2019 16:34:00'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutsValidCartCorrectly stamp: 'CL 11/6/2019 16:34:00'!
ERROR!

!classDefinition: #CashierTest category: #TusLibros stamp: 'CL 11/6/2019 16:43:15'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'mpriResponse'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:43:13' prior: 50784560!
test06CheckoutDoesNotCompleteWhenInterfaceReturnsError

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCart add: self itemSellByTheStore .
	aDate := self today.
	aCreditCard := self createCreditCardValidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	mpriResponse := [self error: 'La tarjeta no tiene fondos suficientes'].
	
	self
		should:[aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error| self assert: error messageText equals: 'La tarjeta no tiene fondos suficientes'.
			self assert: aSalesBook isEmpty]! !

!testRun: #CashierTest #test06CheckoutDoesNotCompleteWhenInterfaceReturnsError stamp: 'CL 11/6/2019 16:43:15'!
PASSED!

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/6/2019 16:43:15'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutsValidCartCorrectly stamp: 'CL 11/6/2019 16:43:15'!
ERROR!

!testRun: #CashierTest #test03AnExpiredCreditCardCanNotCheckout stamp: 'CL 11/6/2019 16:43:15'!
PASSED!

!testRun: #CashierTest #test04ACreditCardWithExceedingAmountOfLetersInOwnersNameCanNotCheckout stamp: 'CL 11/6/2019 16:43:15'!
PASSED!

!testRun: #CashierTest #test05ACreditCardWithExceedingAmountOfDigitsInIDCanNotCheckout stamp: 'CL 11/6/2019 16:43:15'!
PASSED!

!testRun: #CashierTest #test06CheckoutDoesNotCompleteWhenInterfaceReturnsError stamp: 'CL 11/6/2019 16:43:15'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutsValidCartCorrectly stamp: 'CL 11/6/2019 16:43:15'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:43:39' prior: 50784633!
charge: aTotalPrice on: aCreditCard 
	mpriResponse value! !

!testRun: #CashierTest #test06CheckoutDoesNotCompleteWhenInterfaceReturnsError stamp: 'CL 11/6/2019 16:43:47'!
PASSED!

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/6/2019 16:43:47'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutsValidCartCorrectly stamp: 'CL 11/6/2019 16:43:47'!
PASSED!

!testRun: #CashierTest #test03AnExpiredCreditCardCanNotCheckout stamp: 'CL 11/6/2019 16:43:47'!
PASSED!

!testRun: #CashierTest #test04ACreditCardWithExceedingAmountOfLetersInOwnersNameCanNotCheckout stamp: 'CL 11/6/2019 16:43:47'!
PASSED!

!testRun: #CashierTest #test05ACreditCardWithExceedingAmountOfDigitsInIDCanNotCheckout stamp: 'CL 11/6/2019 16:43:47'!
PASSED!

!testRun: #CashierTest #test06CheckoutDoesNotCompleteWhenInterfaceReturnsError stamp: 'CL 11/6/2019 16:43:47'!
PASSED!

!classDefinition: #CashierTest category: #TusLibros stamp: 'CL 11/6/2019 16:47:20'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'mpriResponse mpriWasCalled'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:47:17'!
test07MPRIIsCalledEvenIfThereIsNoError

	| aCart aCashier aCreditCard aDate aSalesBook |
	aCart := self createCart.
	aCart add: self itemSellByTheStore .
	aDate := self today.
	aCreditCard := self createCreditCardValidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	mpriResponse := [self error: 'La tarjeta no tiene fondos suficientes'].
	mpriWasCalled := false.
	
	aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate.
	
	self assert: true! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:47:36' prior: 50783821!
test02CashierCheckoutsValidCartCorrectly

	| aCart aCashier aCreditCard aDate aSalesBook totalPrice |
	aCart := self createCart.
	aDate := self today.
	aCreditCard := self createCreditCardValidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	
	aCart add: self itemSellByTheStore.
	totalPrice := aCashier checkoutOf: aCart withCC: aCreditCard andDate: aDate.
	
	self assert: (aSalesBook last) equals: totalPrice.
	self assert: aCart isEmpty.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:48:03' prior: 50784766!
test07MPRIIsCalledEvenIfThereIsNoError

	| aCart aCashier aCreditCard aDate aSalesBook totalPrice |
	aCart := self createCart.
	aCart add: self itemSellByTheStore .
	aDate := self today.
	aCreditCard := self createCreditCardValidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	mpriResponse := [self error: 'La tarjeta no tiene fondos suficientes'].
	mpriWasCalled := false.
	
	aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate.
	
	self assert: (aSalesBook last) equals: totalPrice.
	self assert: aCart isEmpty.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:49:07' prior: 50784804!
test07MPRIIsCalledEvenIfThereIsNoError

	| aCart aCashier aCreditCard aDate aSalesBook totalPrice |
	aCart := self createCart.
	aCart add: self itemSellByTheStore .
	aDate := self today.
	aCreditCard := self createCreditCardValidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	mpriResponse := [self error: 'La tarjeta no tiene fondos suficientes'].
	mpriWasCalled := false.
	
	totalPrice := aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate.
	
	self assert: (aSalesBook last) equals: totalPrice.
	self assert: aCart isEmpty.
	self assert: mpriWasCalled
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:49:12' prior: 50784825!
test07MPRIIsCalledEvenIfThereIsNoError

	| aCart aCashier aCreditCard aDate aSalesBook totalPrice |
	aCart := self createCart.
	aCart add: self itemSellByTheStore .
	aDate := self today.
	aCreditCard := self createCreditCardValidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	mpriResponse := [self error: 'La tarjeta no tiene fondos suficientes'].
	mpriWasCalled := false.
	
	totalPrice := aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate.
	
	self assert: (aSalesBook last) equals: totalPrice.
	self assert: aCart isEmpty.
	self assert: mpriWasCalled.
	! !

!testRun: #CashierTest #test07MPRIIsCalledEvenIfThereIsNoError stamp: 'CL 11/6/2019 16:49:12'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:49:33' prior: 50784848!
test07MPRIIsCalledEvenIfThereIsNoError

	| aCart aCashier aCreditCard aDate aSalesBook totalPrice |
	aCart := self createCart.
	aCart add: self itemSellByTheStore .
	aDate := self today.
	aCreditCard := self createCreditCardValidForToday.
	aSalesBook := self createSalesBook.
	aCashier := self createCashierWith: aSalesBook.
	mpriResponse := [].
	mpriWasCalled := false.
	
	totalPrice := aCashier checkoutOf: aCart withCC:aCreditCard andDate:aDate.
	
	self assert: (aSalesBook last) equals: totalPrice.
	self assert: aCart isEmpty.
	self assert: mpriWasCalled.
	! !

!testRun: #CashierTest #test07MPRIIsCalledEvenIfThereIsNoError stamp: 'CL 11/6/2019 16:49:38'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:50:34' prior: 50784728!
charge: aTotalPrice on: aCreditCard 
	mpriWasCalled := true.
	mpriResponse value.! !

!testRun: #CashierTest #test07MPRIIsCalledEvenIfThereIsNoError stamp: 'CL 11/6/2019 16:50:36'!
PASSED!

!testRun: #CashierTest #test01AnEmptyCartCanNotCheckout stamp: 'CL 11/6/2019 16:50:36'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutsValidCartCorrectly stamp: 'CL 11/6/2019 16:50:36'!
PASSED!

!testRun: #CashierTest #test03AnExpiredCreditCardCanNotCheckout stamp: 'CL 11/6/2019 16:50:36'!
PASSED!

!testRun: #CashierTest #test04ACreditCardWithExceedingAmountOfLetersInOwnersNameCanNotCheckout stamp: 'CL 11/6/2019 16:50:36'!
PASSED!

!testRun: #CashierTest #test05ACreditCardWithExceedingAmountOfDigitsInIDCanNotCheckout stamp: 'CL 11/6/2019 16:50:36'!
PASSED!

!testRun: #CashierTest #test06CheckoutDoesNotCompleteWhenInterfaceReturnsError stamp: 'CL 11/6/2019 16:50:36'!
PASSED!

!testRun: #CashierTest #test07MPRIIsCalledEvenIfThereIsNoError stamp: 'CL 11/6/2019 16:50:36'!
PASSED!

!classRemoval: #MPRestInterfaceSimulator stamp: 'CL 11/6/2019 16:51:15'!
Object subclass: #MPRestInterfaceSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: Cashier #initializeWith: stamp: 'CL 11/6/2019 16:53:13'!
initializeWith: aSalesBook 
	salesBook := aSalesBook.!

!methodRemoval: Cashier class #with: stamp: 'CL 11/6/2019 16:53:22'!
with: aSalesBook 
	
	^self new initializeWith: aSalesBook. !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:56:06'!
assertCheckoutRestrictionsAreMetForCart: aCart withCC: aCreditCard andDate: aDate 
	
	
	aCart isEmpty ifTrue: [^self error: self class anEmptyCartCanNotCheckoutErrorDescription].
	(aCreditCard hasExpiredBy: aDate) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isInvalidName: aCreditCard OwnerName) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isInvalidID: aCreditCard cardID) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:56:46' prior: 50784483!
checkoutOf: aCart withCC: aCreditCard andDate: aDate 
	
	| totalPrice |
	self assertCheckoutRestrictionsAreMetForCart: aCart withCC: aCreditCard andDate: aDate. 
	totalPrice := aCart totalPrice.
	mpri charge: totalPrice on: aCreditCard.
	aCart emptyCart.
	salesBook addLast: totalPrice.
	^totalPrice! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:58:08' prior: 50784967!
checkoutOf: aCart withCC: aCreditCard andDate: aDate 
	
	| totalPrice |
	self assertCartIsNotEmpty: aCart.
	self assertCheckoutRestrictionsAreMetForCreditCard: aCreditCard forDate: aDate. 
	totalPrice := aCart totalPrice.
	mpri charge: totalPrice on: aCreditCard.
	aCart emptyCart.
	salesBook addLast: totalPrice.
	^totalPrice! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:58:31'!
assertCheckoutRestrictionsAreMetForCreditCard: aCreditCard andDate: aDate 
	
	(aCreditCard hasExpiredBy: aDate) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isInvalidName: aCreditCard OwnerName) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isInvalidID: aCreditCard cardID) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:58:52'!
assertCartIsNotEmpty: aCart
	
	
	aCart isEmpty ifTrue: [^self error: self class anEmptyCartCanNotCheckoutErrorDescription].
! !

!methodRemoval: Cashier #assertCheckoutRestrictionsAreMetForCart:withCC:andDate: stamp: 'CL 11/6/2019 16:58:57'!
assertCheckoutRestrictionsAreMetForCart: aCart withCC: aCreditCard andDate: aDate 
	
	
	aCart isEmpty ifTrue: [^self error: self class anEmptyCartCanNotCheckoutErrorDescription].
	(aCreditCard hasExpiredBy: aDate) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isInvalidName: aCreditCard OwnerName) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isInvalidID: aCreditCard cardID) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:59:15'!
assertCheckoutRestrictionsAreMetForCreditCard: aCreditCard forDate: aDate
	
	(aCreditCard hasExpiredBy: aDate) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isInvalidName: aCreditCard OwnerName) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isInvalidID: aCreditCard cardID) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	! !

!methodRemoval: Cashier #assertCheckoutRestrictionsAreMetForCreditCard:andDate: stamp: 'CL 11/6/2019 16:59:23'!
assertCheckoutRestrictionsAreMetForCreditCard: aCreditCard andDate: aDate 
	
	(aCreditCard hasExpiredBy: aDate) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isInvalidName: aCreditCard OwnerName) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isInvalidID: aCreditCard cardID) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 16:59:37' prior: 50784980!
checkoutOf: aCart withCC: aCreditCard andDate: aDate 
	
	| totalPrice |
	
	self assertCartIsNotEmpty: aCart.
	self assertCheckoutRestrictionsAreMetForCreditCard: aCreditCard forDate: aDate.
	 
	totalPrice := aCart totalPrice.
	mpri charge: totalPrice on: aCreditCard.
	aCart emptyCart.
	salesBook addLast: totalPrice.
	
	^totalPrice! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 17:00:40'!
assertCreditCardHasNotExpired: aCreditCard forDate: aDate
	
	(aCreditCard hasExpiredBy: aDate) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 17:01:12' prior: 50785038!
assertCheckoutRestrictionsAreMetForCreditCard: aCreditCard forDate: aDate
	
	self assertCreditCardHasNotExpired: aCreditCard forDate: aDate.
	(self isInvalidName: aCreditCard OwnerName) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	(self isInvalidID: aCreditCard cardID) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 17:01:43'!
assertCreditCardHasValidOwnerName: aCreditCard
	
	(self isInvalidName: aCreditCard OwnerName) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 17:02:02' prior: 50785095!
assertCheckoutRestrictionsAreMetForCreditCard: aCreditCard forDate: aDate
	
	self assertCreditCardHasNotExpired: aCreditCard forDate: aDate.
	self assertCreditCardHasValidOwnerName: aCreditCard.
	(self isInvalidID: aCreditCard cardID) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 17:02:24'!
assertCreditCardHasValidID: aCreditCard
	
	(self isInvalidID: aCreditCard cardID) ifTrue: [^self error: self class anInvalidCreditCardCanNotCheckoutErrorDescription].
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CL 11/6/2019 17:02:39' prior: 50785119!
assertCheckoutRestrictionsAreMetForCreditCard: aCreditCard forDate: aDate
	
	self assertCreditCardHasNotExpired: aCreditCard forDate: aDate.
	self assertCreditCardHasValidOwnerName: aCreditCard.
	self assertCreditCardHasValidID: aCreditCard.
	! !

----QUIT----(6 November 2019 17:06:21) CuisUniversity-3938.image priorSource: 14492180!

----STARTUP---- (7 November 2019 19:10:04) as /home/cliberman/Descargas/linux64/CuisUniversity-3938.image!


!classRemoval: #CreditCard stamp: 'CL 11/7/2019 19:10:09'!
Object subclass: #CreditCard
	instanceVariableNames: 'iD ownerName expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'CL 11/7/2019 19:10:10'!
Object subclass: #Cashier
	instanceVariableNames: 'salesBook mpri'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'CL 11/7/2019 19:10:11'!
Object subclass: #Cart
	instanceVariableNames: 'priceList items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'CL 11/7/2019 19:10:11'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'mpriResponse mpriWasCalled'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'CL 11/7/2019 19:10:12'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/cliberman/Descargas/TusLibros.st----!

TestCase subclass: #InputRestInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InputRestInterfaceTest category: #TusLibros stamp: 'CL 11/7/2019 19:12:36'!
TestCase subclass: #InputRestInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InputRestInterfaceTest methodsFor: 'nil' stamp: 'CL 11/7/2019 19:14:14'!
test01CanNotCreateCartWithInvalidUser

	! !
!InputRestInterfaceTest methodsFor: 'nil' stamp: 'CL 11/7/2019 19:14:52'!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !

!classDefinition: #InputRestInterface category: #TusLibros stamp: 'CL 11/7/2019 19:25:47'!
Object subclass: #InputRestInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 19:25:41' prior: 50785752!
test01CanNotCreateCartWithInvalidUser

	self should:[(InputRestInterface new) createCartWithclientID: '1' andPassword: '1234']! !
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 19:38:43' prior: 50785769!
test01CanNotCreateCartWithInvalidUser

	self
	should: [(InputRestInterface new) createCartWithclientID: '1' andPassword: '1234']
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InputRestInterface canNotCreateCartWithInvalidUserErrorMessage.
			self assert: false ]! !
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 19:38:50'!
test02CanNotCreateCartWithInvalidUser

	self
	should: [(InputRestInterface new) createCartWithclientID: '1' andPassword: '1234']
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InputRestInterface canNotCreateCartWithInvalidUserErrorMessage.
			self assert: false ]! !

!methodRemoval: InputRestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'CL 11/7/2019 19:38:58'!
test01CanNotCreateCartWithInvalidUser

	self
	should: [(InputRestInterface new) createCartWithclientID: '1' andPassword: '1234']
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = InputRestInterface canNotCreateCartWithInvalidUserErrorMessage.
			self assert: false ]!
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 19:41:22'!
test01CanCreateCartWithValidUser
	|aCartID|

	aCartID := (InputRestInterface new) createCartWithclientID: '1' andPassword: '1234'.
	
	self assert: false.! !
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 19:42:36' prior: 50785791!
test02CanNotCreateCartWithInvalidUser

	self
	should: [(SalesInputRestInterface new) createCartWithclientID: '1' andPassword: '1234']
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = SalesInputRestInterface canNotCreateCartWithInvalidUserErrorMessage.
			self assert: false ]! !
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 19:42:36' prior: 50785818!
test01CanCreateCartWithValidUser
	|aCartID|

	aCartID := (SalesInputRestInterface new) createCartWithclientID: '1' andPassword: '1234'.
	
	self assert: false.! !
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 19:46:12' prior: 50785841!
test01CanCreateCartWithValidUser
	|aCartID aSalesInputRestInterface|

	aSalesInputRestInterface := SalesInputRestInterface new. 
	aCartID := aSalesInputRestInterface createCartWithclientID: '1' andPassword: '1234'.
	
	self assert: aSalesInputRestInterface cart: aCartID isEmpty.! !
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 19:46:22' prior: 50785850!
test01CanCreateCartWithValidUser
	|aCartID aSalesInputRestInterface|

	aSalesInputRestInterface := SalesInputRestInterface new. 
	aCartID := aSalesInputRestInterface createCartWithclientID: '1' andPassword: '1234'.
	
	self assert: (aSalesInputRestInterface cart: aCartID isEmpty).! !
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 19:47:41' prior: 50785863!
test01CanCreateCartWithValidUser
	|aCartID aSalesInputRestInterface|

	aSalesInputRestInterface := SalesInputRestInterface new. 
	aCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	
	self assert: (aSalesInputRestInterface cart: aCartID isEmpty).! !

!testRun: #InputRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 19:47:45'!
ERROR!
!SalesInputRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 19:48:04'!
createCartWithClientID: aString andPassword: aString2 
	self shouldBeImplemented.! !

!classDefinition: #SalesInputRestInterface category: #TusLibros stamp: 'CL 11/7/2019 19:53:09'!
Object subclass: #SalesInputRestInterface
	instanceVariableNames: 'catalog'
	classVariableNames: 'ClientsCart'
	poolDictionaries: ''
	category: 'TusLibros'!
!SalesInputRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 19:52:56' prior: 50785892!
createCartWithClientID: aClientID andPassword: aPassword 
	
	ClientsCart := Cart acceptingItemsOf: catalog.
	
	^1! !

!classDefinition: #SalesInputRestInterface category: #TusLibros stamp: 'CL 11/7/2019 19:53:49'!
Object subclass: #SalesInputRestInterface
	instanceVariableNames: 'catalog clientsCart'
	classVariableNames: 'ClientsCart'
	poolDictionaries: ''
	category: 'TusLibros'!
!SalesInputRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 19:53:47' prior: 50785906!
createCartWithClientID: aClientID andPassword: aPassword 
	
	clientsCart := Cart acceptingItemsOf: catalog.
	
	^1! !
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 19:55:15' prior: 50785876!
test01CanCreateCartWithValidUser
	|aCartID aSalesInputRestInterface|

	aSalesInputRestInterface := SalesInputRestInterface acceptingItemsOf: StoreTestObjectsFactory defaultCatalog. 
	aCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	
	self assert: (aSalesInputRestInterface cart: aCartID isEmpty).! !

!testRun: #InputRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 19:55:17'!
ERROR!
!StoreTestObjectsFactory class methodsFor: 'instance creation' stamp: 'CL 11/7/2019 19:55:36'!
defaultCatalog
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeDefaultCatalog! !

!testRun: #InputRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 19:56:07'!
ERROR!

!testRun: #InputRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 19:56:07'!
ERROR!

!methodRemoval: StoreTestObjectsFactory class #defaultCatalog stamp: 'CL 11/7/2019 19:56:25'!
defaultCatalog
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeDefaultCatalog!
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 19:56:45' prior: 50785929!
test01CanCreateCartWithValidUser
	|aCartID aSalesInputRestInterface|

	aSalesInputRestInterface := SalesInputRestInterface acceptingItemsOf: testObjectsFactory defaultCatalog. 
	aCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	
	self assert: (aSalesInputRestInterface cart: aCartID isEmpty).! !

!testRun: #InputRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 19:57:13'!
ERROR!

!testRun: #InputRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 19:57:13'!
ERROR!
!SalesInputRestInterface class methodsFor: 'instance creation' stamp: 'CL 11/7/2019 19:57:38'!
acceptingItemsOf: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAcceptingItemsOf: aDictionary ! !
!SalesInputRestInterface class methodsFor: 'instance creation' stamp: 'CL 11/7/2019 19:58:42' prior: 50785990!
acceptingItemsOf: aCatalog
	
	^self new initializeAcceptingItemsOf: aCatalog ! !

!testRun: #InputRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 19:58:44'!
ERROR!
!SalesInputRestInterface methodsFor: 'initialization' stamp: 'CL 11/7/2019 19:58:57'!
initializeAcceptingItemsOf: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!SalesInputRestInterface methodsFor: 'initialization' stamp: 'CL 11/7/2019 19:59:22' prior: 50786009!
initializeAcceptingItemsOf: aCatalog 
	
	catalog := aCatalog! !

!testRun: #InputRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 19:59:24'!
ERROR!
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 19:59:52' prior: 50785969!
test01CanCreateCartWithValidUser
	|aCartID aSalesInputRestInterface|

	aSalesInputRestInterface := SalesInputRestInterface acceptingItemsOf: testObjectsFactory defaultCatalog. 
	aCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	
	self assert: ((aSalesInputRestInterface cart: aCartID) isEmpty).! !

!testRun: #InputRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 20:00:11'!
ERROR!
!SalesInputRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:00:22'!
cart: aSmallInteger 
	self shouldBeImplemented.! !
!SalesInputRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:00:51' prior: 50786041!
cart: aCartID
	! !
!SalesInputRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:01:48' prior: 50786046!
cart: aCartID
	^clientsCart! !

!testRun: #InputRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 20:01:52'!
PASSED!

!testRun: #InputRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 20:02:00'!
PASSED!
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:02:35' prior: 50785827!
test02CanNotCreateCartWithInvalidUser

	|aCartID aSalesInputRestInterface|
	
	self
	should: [(SalesInputRestInterface new) createCartWithclientID: '1' andPassword: '1234']
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = SalesInputRestInterface canNotCreateCartWithInvalidUserErrorMessage.
			self assert: false ]! !
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:08:23' prior: 50786024!
test01CanCreateCartWithValidUser
	|aCartID aSalesInputRestInterface|

	aSalesInputRestInterface := SalesInputRestInterface acceptingItemsOf: testObjectsFactory defaultCatalog. 
	aCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) isEmpty).! !
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:10:38' prior: 50786062!
test02CanNotCreateCartWithInvalidUser

	||
	
	self
	should: [(SalesInputRestInterface new) createCartWithclientID: '1' andPassword: 'pepe']
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = SalesInputRestInterface canNotCreateCartWithInvalidUserErrorMessage.]! !
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:10:51' prior: 50786092!
test02CanNotCreateCartWithInvalidUser

	self
	should: [(SalesInputRestInterface new) createCartWithclientID: '1' andPassword: 'pepe']
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = SalesInputRestInterface canNotCreateCartWithInvalidUserErrorMessage.]! !
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:12:23' prior: 50786106!
test02CanNotCreateCartWithInvalidUser

	self
	should: [(ClientRestInterface new) createCartWithclientID: '1' andPassword: 'pepe']
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotCreateCartWithInvalidUserErrorMessage.]! !
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:12:23' prior: 50786078!
test01CanCreateCartWithValidUser
	|aCartID aSalesInputRestInterface|

	aSalesInputRestInterface := ClientRestInterface acceptingItemsOf: testObjectsFactory defaultCatalog. 
	aCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) isEmpty).! !

!methodRemoval: ClientRestInterface #cart: stamp: 'CL 11/7/2019 20:12:33'!
cart: aCartID
	^clientsCart!

!testRun: #InputRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 20:12:45'!
ERROR!

!testRun: #InputRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 20:12:45'!
ERROR!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:12:52'!
listCart: aSmallInteger 
	self shouldBeImplemented.! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:13:26' prior: 50786157!
listCart: aCartID 
	^OrderedCollection new! !

!testRun: #InputRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 20:13:47'!
PASSED!

!testRun: #InputRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 20:13:55'!
PASSED!
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:14:03'!
test03CanNotCreateCartWithInvalidUser

	self
	should: [(ClientRestInterface new) createCartWithclientID: '1' andPassword: 'pepe']
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotCreateCartWithInvalidUserErrorMessage.]! !

!methodRemoval: InputRestInterfaceTest #test02CanNotCreateCartWithInvalidUser stamp: 'CL 11/7/2019 20:14:10'!
test02CanNotCreateCartWithInvalidUser

	self
	should: [(ClientRestInterface new) createCartWithclientID: '1' andPassword: 'pepe']
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotCreateCartWithInvalidUserErrorMessage.]!
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:14:33'!
test02CanNotCreateCartWithInvalidUser

	self
	should: [(ClientRestInterface new) createCartWithclientID: '1' andPassword: 'pepe']
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotCreateCartWithInvalidUserErrorMessage.]! !

!methodRemoval: InputRestInterfaceTest #test03CanNotCreateCartWithInvalidUser stamp: 'CL 11/7/2019 20:14:33'!
test03CanNotCreateCartWithInvalidUser

	self
	should: [(ClientRestInterface new) createCartWithclientID: '1' andPassword: 'pepe']
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotCreateCartWithInvalidUserErrorMessage.]!
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:16:30'!
newClientRestInterface
	
	^ClientRestInterface acceptingItemsOf: testObjectsFactory defaultCatalog! !
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:16:54' prior: 50786133!
test01CanCreateCartWithValidUser
	|aCartID aSalesInputRestInterface|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) isEmpty).! !
!InputRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:17:38' prior: 50786226!
newClientRestInterface
	
	^ClientRestInterface acceptingItemsOf: testObjectsFactory defaultCatalog andCheckingUsersWith: self! !

!testRun: #InputRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 20:18:02'!
ERROR!
!ClientRestInterface class methodsFor: 'instance creation' stamp: 'CL 11/7/2019 20:18:08'!
acceptingItemsOf: aDictionary andCheckingUsersWith: anInputRestInterfaceTest 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAcceptingItemsOf: aDictionary andCheckingUsersWith: anInputRestInterfaceTest ! !
!ClientRestInterface class methodsFor: 'instance creation' stamp: 'CL 11/7/2019 20:18:14' prior: 50786257!
acceptingItemsOf: aDictionary andCheckingUsersWith: anInputRestInterfaceTest 
	
	^self new initializeAcceptingItemsOf: aDictionary andCheckingUsersWith: anInputRestInterfaceTest ! !
!ClientRestInterface class methodsFor: 'instance creation' stamp: 'CL 11/7/2019 20:18:30' prior: 50786269!
acceptingItemsOf: aCatalog andCheckingUsersWith: anInputRestInterfaceTest 
	
	^self new initializeAcceptingItemsOf: aCatalog andCheckingUsersWith: anInputRestInterfaceTest ! !

!testRun: #InputRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 20:18:32'!
ERROR!

!classDefinition: #ClientRestInterface category: #TusLibros stamp: 'CL 11/7/2019 20:18:45'!
Object subclass: #ClientRestInterface
	instanceVariableNames: 'catalog clientsCart inputRestInterfaceTest'
	classVariableNames: 'ClientsCart'
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientRestInterface methodsFor: 'initialization' stamp: 'CL 11/7/2019 20:18:45'!
initializeAcceptingItemsOf: aCatalog andCheckingUsersWith: anInputRestInterfaceTest 
	self shouldBeImplemented.
	catalog := aCatalog.
	inputRestInterfaceTest := anInputRestInterfaceTest.! !

!classDefinition: #ClientRestInterface category: #TusLibros stamp: 'CL 11/7/2019 20:20:01'!
Object subclass: #ClientRestInterface
	instanceVariableNames: 'catalog clientsCart inputRestInterfaceTest userChecker'
	classVariableNames: 'ClientsCart'
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientRestInterface methodsFor: 'initialization' stamp: 'CL 11/7/2019 20:19:58' prior: 50786300!
initializeAcceptingItemsOf: aCatalog andCheckingUsersWith: aUserChecker 
	
	catalog := aCatalog.
	userChecker := aUserChecker.! !

!testRun: #InputRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 20:20:04'!
PASSED!

!testRun: #InputRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 20:20:04'!
PASSED!

!testRun: #InputRestInterfaceTest #test02CanNotCreateCartWithInvalidUser stamp: 'CL 11/7/2019 20:20:04'!
ERROR!

!testRun: #InputRestInterfaceTest #test02CanNotCreateCartWithInvalidUser stamp: 'CL 11/7/2019 20:20:04'!
ERROR!

!testRun: #InputRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 20:20:18'!
PASSED!

!methodRemoval: ClientRestInterface #initializeAcceptingItemsOf: stamp: 'CL 11/7/2019 20:20:47'!
initializeAcceptingItemsOf: aCatalog 
	
	catalog := aCatalog!

!testRun: #ClientRestInterfaceTest #test02CanNotCreateCartWithInvalidUser stamp: 'CL 11/7/2019 20:34:24'!
ERROR!
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:35:00' prior: 50786200!
test02CanNotCreateCartWithInvalidUser

	self
	should: [(self newClientRestInterface) createCartWithclientID: '1' andPassword: 'pepe']
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotCreateCartWithInvalidUserErrorMessage.]! !

!testRun: #ClientRestInterfaceTest #test02CanNotCreateCartWithInvalidUser stamp: 'CL 11/7/2019 20:35:00'!
ERROR!
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:35:30' prior: 50786353!
test02CanNotCreateCartWithInvalidUser

	self
	should: [(self newClientRestInterface) createCartWithClientID: '1' andPassword: '1234'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotCreateCartWithInvalidUserErrorMessage.]! !

!testRun: #ClientRestInterfaceTest #test02CanNotCreateCartWithInvalidUser stamp: 'CL 11/7/2019 20:35:33'!
FAILURE!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:37:06' prior: 50785922!
createCartWithClientID: aClientID andPassword: aPassword

	userChecker checkUser: aClientID withPassword: aPassword.
	clientsCart := Cart acceptingItemsOf: catalog.
	^1! !

!testRun: #ClientRestInterfaceTest #test02CanNotCreateCartWithInvalidUser stamp: 'CL 11/7/2019 20:37:11'!
ERROR!
!ClientRestInterfaceTest methodsFor: 'userCheckerSimulator' stamp: 'CL 11/7/2019 20:37:31'!
checkUser: aString withPassword: aString2 
	self shouldBeImplemented.! !

!classDefinition: #ClientRestInterfaceTest category: #TusLibros stamp: 'CL 11/7/2019 20:41:29'!
TestCase subclass: #ClientRestInterfaceTest
	instanceVariableNames: 'testObjectsFactory userCheckerSimulatorClosure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientRestInterfaceTest methodsFor: 'userCheckerSimulator' stamp: 'CL 11/7/2019 20:41:26' prior: 50786399!
checkUser: aClientID withPassword: aPassword 
	^userCheckerSimulatorClosure value.! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:41:53' prior: 50786370!
test02CanNotCreateCartWithInvalidUser

	userCheckerSimulatorClosure := [^false]
	self
	should: [(self newClientRestInterface) createCartWithClientID: '1' andPassword: '1234'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotCreateCartWithInvalidUserErrorMessage.]! !

!testRun: #ClientRestInterfaceTest #test02CanNotCreateCartWithInvalidUser stamp: 'CL 11/7/2019 20:41:56'!
ERROR!

!testRun: #ClientRestInterfaceTest #test02CanNotCreateCartWithInvalidUser stamp: 'CL 11/7/2019 20:42:06'!
ERROR!
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:42:18' prior: 50786421!
test02CanNotCreateCartWithInvalidUser

	userCheckerSimulatorClosure := [^false].
	self
	should: [(self newClientRestInterface) createCartWithClientID: '1' andPassword: '1234'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotCreateCartWithInvalidUserErrorMessage.]! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:47:35' prior: 50786443!
test02CanNotCreateCartWithInvalidUser

	userCheckerSimulatorClosure := [self error: ClientRestInterface canNotCreateCartWithInvalidUserErrorMessage].
	self
	should: [(self newClientRestInterface) createCartWithClientID: '1' andPassword: '1234'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotCreateCartWithInvalidUserErrorMessage.]! !

!testRun: #ClientRestInterfaceTest #test02CanNotCreateCartWithInvalidUser stamp: 'CL 11/7/2019 20:47:40'!
ERROR!
!ClientRestInterface class methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:47:59'!
canNotCreateCartWithInvalidUserErrorMessage
	self shouldBeImplemented.! !
!ClientRestInterface class methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:48:13' prior: 50786478!
canNotCreateCartWithInvalidUserErrorMessage
	^'Usuario Invalido'! !
!ClientRestInterface class methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:48:50' prior: 50786484!
canNotCreateCartWithInvalidUserErrorMessage
	^'No se puede crear un carrito; usuario invalido'! !

!testRun: #ClientRestInterfaceTest #test02CanNotCreateCartWithInvalidUser stamp: 'CL 11/7/2019 20:48:54'!
PASSED!

!testRun: #ClientRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/7/2019 20:48:54'!
PASSED!

!testRun: #ClientRestInterfaceTest #test02CanNotCreateCartWithInvalidUser stamp: 'CL 11/7/2019 20:48:54'!
PASSED!
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:51:12'!
test03CanAddItemsToCart
	|aCartID aSalesInputRestInterface|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) isEmpty).! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 20:57:05' prior: 50786507!
test03CanAddItemsToCart
	|aCartID aSalesInputRestInterface|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	aSalesInputRestInterface addToCart: aCartID. 
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) isEmpty).! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 21:01:40'!
test01ValidUserCanCreateMultipleCarts
	|aFirstCartID aSecondCartID aSalesInputRestInterface|

	aSalesInputRestInterface := self newClientRestInterface. 
	aFirstCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	aSecondCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	
	self assert: ((aSalesInputRestInterface listCart: aFirstCartID) isEmpty).
	self assert: ((aSalesInputRestInterface listCart: aSecondCartID) isEmpty).
	self deny: (aFirstCartID = aSecondCartID).! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 21:01:54'!
test03ValidUserCanCreateMultipleCarts
	|aFirstCartID aSecondCartID aSalesInputRestInterface|

	aSalesInputRestInterface := self newClientRestInterface. 
	aFirstCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	aSecondCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	
	self assert: ((aSalesInputRestInterface listCart: aFirstCartID) isEmpty).
	self assert: ((aSalesInputRestInterface listCart: aSecondCartID) isEmpty).
	self deny: (aFirstCartID = aSecondCartID).! !

!methodRemoval: ClientRestInterfaceTest #test01ValidUserCanCreateMultipleCarts stamp: 'CL 11/7/2019 21:01:54'!
test01ValidUserCanCreateMultipleCarts
	|aFirstCartID aSecondCartID aSalesInputRestInterface|

	aSalesInputRestInterface := self newClientRestInterface. 
	aFirstCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	aSecondCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	
	self assert: ((aSalesInputRestInterface listCart: aFirstCartID) isEmpty).
	self assert: ((aSalesInputRestInterface listCart: aSecondCartID) isEmpty).
	self deny: (aFirstCartID = aSecondCartID).!
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 21:02:27'!
test04CanAddItemsToCart
	|aCartID aSalesInputRestInterface|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	aSalesInputRestInterface addToCart: aCartID. 
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) isEmpty).! !

!methodRemoval: ClientRestInterfaceTest #test03CanAddItemsToCart stamp: 'CL 11/7/2019 21:02:27'!
test03CanAddItemsToCart
	|aCartID aSalesInputRestInterface|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	aSalesInputRestInterface addToCart: aCartID. 
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) isEmpty).!
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 21:03:17' prior: 50786594!
test04CanAddItemsToCart
	|aCartID aSalesInputRestInterface|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	aSalesInputRestInterface addToCart: aCartID. 
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) isEmpty).! !

!testRun: #ClientRestInterfaceTest #test03ValidUserCanCreateMultipleCarts stamp: 'CL 11/7/2019 21:03:30'!
FAILURE!

!testRun: #ClientRestInterfaceTest #test03ValidUserCanCreateMultipleCarts stamp: 'CL 11/7/2019 21:03:30'!
FAILURE!

!classDefinition: #ClientRestInterface category: #TusLibros stamp: 'CL 11/7/2019 21:07:24'!
Object subclass: #ClientRestInterface
	instanceVariableNames: 'catalog clientsCart inputRestInterfaceTest userChecker newCartID'
	classVariableNames: 'ClientsCart'
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 21:07:22' prior: 50786387!
createCartWithClientID: aClientID andPassword: aPassword

	userChecker checkUser: aClientID withPassword: aPassword.
	clientsCart := Cart acceptingItemsOf: catalog.
	newCartID := newCartID+1.
	^newCartID! !
!ClientRestInterface methodsFor: 'initialization' stamp: 'CL 11/7/2019 21:07:54' prior: 50786319!
initializeAcceptingItemsOf: aCatalog andCheckingUsersWith: aUserChecker 
	
	catalog := aCatalog.
	userChecker := aUserChecker.
	newCartID := 1.! !

!testRun: #ClientRestInterfaceTest #test03ValidUserCanCreateMultipleCarts stamp: 'CL 11/7/2019 21:07:56'!
PASSED!

!testRun: #ClientRestInterfaceTest #test03ValidUserCanCreateMultipleCarts stamp: 'CL 11/7/2019 21:08:00'!
PASSED!
!ClientRestInterface methodsFor: 'initialization' stamp: 'CL 11/7/2019 21:09:05' prior: 50786662!
initializeAcceptingItemsOf: aCatalog andCheckingUsersWith: aUserChecker 
	
	catalog := aCatalog.
	userChecker := aUserChecker.
	newCartID := 0.! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 21:12:15' prior: 50786621!
test04CanAddItemsToCart
	|aCartID aSalesInputRestInterface|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 1 ofThisItem: 1. 
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) isEmpty).! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 21:22:11' prior: 50786685!
test04CanAddItemsToCart
	|aCartID aSalesInputRestInterface anItem|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem. 
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.! !

!testRun: #ClientRestInterfaceTest #test04CanAddItemsToCart stamp: 'CL 11/7/2019 21:22:40'!
ERROR!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 21:22:56'!
addToCart: aSmallInteger thisAmount: aSmallInteger2 ofThisItem: aString 
	self shouldBeImplemented.! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 21:25:46' prior: 50786720!
addToCart: aCartID thisAmount: anAmountOfItems ofThisItem: anItem 
	clientsCart addToCart: aCartID thisAmount: anAmountOfItems ofThisItem: anItem! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 21:26:31' prior: 50786727!
addToCart: aCartID thisAmount: anAmountOfItems ofThisItem: anItem 
	clientsCart add: anAmountOfItems of: anItem! !

!testRun: #ClientRestInterfaceTest #test04CanAddItemsToCart stamp: 'CL 11/7/2019 21:26:35'!
FAILURE!
!ClientRestInterface methodsFor: 'initialization' stamp: 'CL 11/7/2019 21:27:43' prior: 50786677!
initializeAcceptingItemsOf: aCatalog andCheckingUsersWith: aUserChecker 
	
	catalog := aCatalog.
	userChecker := aUserChecker.
	newCartID := 0.! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/7/2019 21:28:15' prior: 50786162!
listCart: aCartID 
	^clientsCart! !

----QUIT----(7 November 2019 21:30:16) CuisUniversity-3938.image priorSource: 14512022!

----STARTUP---- (11 November 2019 16:43:33) as /home/cliberman/Descargas/linux64/CuisUniversity-3938.image!


!testRun: #ClientRestInterfaceTest #test04CanAddItemsToCart stamp: 'CL 11/11/2019 17:36:26'!
PASSED!

!testRun: #ClientRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/11/2019 17:36:26'!
PASSED!

!testRun: #ClientRestInterfaceTest #test02CanNotCreateCartWithInvalidUser stamp: 'CL 11/11/2019 17:36:26'!
PASSED!

!testRun: #ClientRestInterfaceTest #test03ValidUserCanCreateMultipleCarts stamp: 'CL 11/11/2019 17:36:26'!
PASSED!

!testRun: #ClientRestInterfaceTest #test04CanAddItemsToCart stamp: 'CL 11/11/2019 17:36:26'!
PASSED!
!ClientRestInterfaceTest methodsFor: 'userCheckerSimulator' stamp: 'CL 11/11/2019 17:37:30'!
isUserValid: aClientID withPassword: aPassword 
	^userCheckerSimulatorClosure value.! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 17:37:30' prior: 50786652!
createCartWithClientID: aClientID andPassword: aPassword

	userChecker isUserValid: aClientID withPassword: aPassword.
	clientsCart := Cart acceptingItemsOf: catalog.
	newCartID := newCartID+1.
	^newCartID! !

!methodRemoval: ClientRestInterfaceTest #checkUser:withPassword: stamp: 'CL 11/11/2019 17:37:30'!
checkUser: aClientID withPassword: aPassword 
	^userCheckerSimulatorClosure value.!

!testRun: #ClientRestInterfaceTest #test04CanAddItemsToCart stamp: 'CL 11/11/2019 17:39:12'!
PASSED!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 17:44:29'!
newCartID
	^newCartID+1! !

!methodRemoval: ClientRestInterface #newCartID stamp: 'CL 11/11/2019 17:44:43'!
newCartID
	^newCartID+1!

x _ Bag with: 'a' with: 'b' with: 'c' with: 'a'.!

x do: [:a | Transcript show: a printString; newLine]!

x do: [:a | Transcript show: a printString; newLine]!

x do: [:a | Transcript show: a printString; newLine].!

x do: [:a | Transcript show: a printString; newLine].!

y _ x do: [:a | Transcript show: a printString; newLine].!

y _ x select: [:a | a > 2]!

y _ x select: [:a | a]!

y _ x select: [:a | true]!

x _ Bag with: 4 with: 3 with: 2 with: 1.!

x contents!

x sortedElements!

x _ Bag with: 4 with: 3 with: 1 with: 1.
x sortedElements!

1 -> 2!

x sortedElements inject:'' into:[:item | item key asString , '|' , item value asString ]!

x sortedElements inject:'' into:[:list :item | list , item key asString , '|' , item value asString ]!

x sortedElements inject:'' into:[:list :item | list , item key asString , '|' , item value asString , '|' ]!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 18:04:53' prior: 50786753!
listCart: aCartID 
	^clientsCart createCartList! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 18:05:44' prior: 50786841!
listCart: aCartID 
	^clientsCart createCartListFor: self! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 18:07:34' prior: 50786846!
listCart: aCartID 
	^clientsCart createCartListFor: self in: (Bag new)! !
!Cart methodsFor: 'queries' stamp: 'CL 11/11/2019 18:08:11'!
createCartListFor: aClientRestInterface in: aList

	! !
!Cart methodsFor: 'queries' stamp: 'CL 11/11/2019 18:11:04' prior: 50786857!
createCartListFor: aClientRestInterface in: aList

	items do:[:item| aList addLast: item].! !
!Cart methodsFor: 'queries' stamp: 'CL 11/11/2019 18:12:25' prior: 50786862!
createCartListFor: aClientRestInterface in: aList

	items do:[:item| aClientRestInterface add: item to: aList].! !
!Cart methodsFor: 'queries' stamp: 'CL 11/11/2019 18:12:41' prior: 50786868!
createCartListFor: aClientRestInterface in: aList

	items do:[:item| aClientRestInterface addItem: item toList: aList].! !
!Cart methodsFor: 'queries' stamp: 'CL 11/11/2019 18:24:26'!
visitItemsFrom: aVisitor with: aClosure

	items do:aClosure! !

!methodRemoval: Cart #createCartListFor:in: stamp: 'CL 11/11/2019 18:24:51'!
createCartListFor: aClientRestInterface in: aList

	items do:[:item| aClientRestInterface addItem: item toList: aList].!

x do:[:items | y := y, items asString]!

y:=''!

y:=''.!

x do:[:items | y := y , items asString]!

y!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 18:31:00' prior: 50786852!
listCart: aCartID 
	|clientsList|
	clientsList := Bag new.
	clientsCart visitItemsFrom: self with: [:item | clientsList add: item].
	^clientsList! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 18:33:46' prior: 50786895!
listCart: aCartID 
	|clientsList|
	clientsList := Bag new.
	clientsCart visitItemsFrom: self with: [:item | clientsList add: item].
	^clientsList! !

!testRun: #ClientRestInterfaceTest #test04CanAddItemsToCart stamp: 'CL 11/11/2019 18:34:25'!
PASSED!

!testRun: #ClientRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/11/2019 18:34:43'!
PASSED!

!testRun: #ClientRestInterfaceTest #test02CanNotCreateCartWithInvalidUser stamp: 'CL 11/11/2019 18:34:43'!
PASSED!

!testRun: #ClientRestInterfaceTest #test03ValidUserCanCreateMultipleCarts stamp: 'CL 11/11/2019 18:34:43'!
PASSED!

!testRun: #ClientRestInterfaceTest #test04CanAddItemsToCart stamp: 'CL 11/11/2019 18:34:43'!
PASSED!
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 18:37:22'!
test04CanAddItemsToMultipleCarts
	|aCartID aSalesInputRestInterface anItem|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem. 
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 18:37:30'!
test05CanAddItemsToMultipleCarts
	|aCartID aSalesInputRestInterface anItem|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem. 
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.! !

!methodRemoval: ClientRestInterfaceTest #test04CanAddItemsToMultipleCarts stamp: 'CL 11/11/2019 18:37:30'!
test04CanAddItemsToMultipleCarts
	|aCartID aSalesInputRestInterface anItem|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem. 
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.!
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 18:39:11' prior: 50786945!
test05CanAddItemsToMultipleCarts
	|aFirstCartID aSecondCartID aSalesInputRestInterface anItem|

	aSalesInputRestInterface := self newClientRestInterface. 
	aFirstCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	aSecondCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aFirstCartID thisAmount: 2 ofThisItem: anItem.
	aSalesInputRestInterface addToCart: aSecondCartID thisAmount: 3 ofThisItem: anItem.
	
	self assert: ((aSalesInputRestInterface listCart: aFirstCartID) occurrencesOf: anItem) equals: 2.
	self assert: ((aSalesInputRestInterface listCart: aFirstCartID) occurrencesOf: anItem) equals: 3.! !

!testRun: #ClientRestInterfaceTest #test05CanAddItemsToMultipleCarts stamp: 'CL 11/11/2019 18:39:25'!
FAILURE!
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 18:39:56' prior: 50786980!
test05CanAddItemsToMultipleCarts
	|aFirstCartID aSecondCartID aSalesInputRestInterface anItem|

	aSalesInputRestInterface := self newClientRestInterface. 
	aFirstCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	aSecondCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aFirstCartID thisAmount: 2 ofThisItem: anItem.
	aSalesInputRestInterface addToCart: aSecondCartID thisAmount: 3 ofThisItem: anItem.
	
	self assert: ((aSalesInputRestInterface listCart: aFirstCartID) occurrencesOf: anItem) equals: 2.
	self assert: ((aSalesInputRestInterface listCart: aSecondCartID) occurrencesOf: anItem) equals: 3.! !
!ClientRestInterface methodsFor: 'initialization' stamp: 'CL 11/11/2019 18:42:44' prior: 50786745!
initializeAcceptingItemsOf: aCatalog andCheckingUsersWith: aUserChecker 
	
	catalog := aCatalog.
	userChecker := aUserChecker.
	newCartID := 0.
	clientsCart := OrderedCollection new.! !

!classDefinition: #ClientRestInterface category: #TusLibros stamp: 'CL 11/11/2019 18:43:05'!
Object subclass: #ClientRestInterface
	instanceVariableNames: 'catalog clientsCarts inputRestInterfaceTest userChecker newCartID'
	classVariableNames: 'ClientsCart'
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 18:43:05' prior: 50786903!
listCart: aCartID 
	|clientsList|
	clientsList := Bag new.
	clientsCarts visitItemsFrom: self with: [:item | clientsList add: item].
	^clientsList! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 18:43:05' prior: 50786735!
addToCart: aCartID thisAmount: anAmountOfItems ofThisItem: anItem 
	clientsCarts add: anAmountOfItems of: anItem! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 18:43:05' prior: 50787038!
initializeAcceptingItemsOf: aCatalog andCheckingUsersWith: aUserChecker 
	
	catalog := aCatalog.
	userChecker := aUserChecker.
	newCartID := 0.
	clientsCarts := OrderedCollection new.! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 18:43:05' prior: 50786787!
createCartWithClientID: aClientID andPassword: aPassword

	userChecker isUserValid: aClientID withPassword: aPassword.
	clientsCarts := Cart acceptingItemsOf: catalog.
	newCartID := newCartID+1.
	^newCartID! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 18:43:30' prior: 50787082!
createCartWithClientID: aClientID andPassword: aPassword

	userChecker isUserValid: aClientID withPassword: aPassword.
	clientsCarts addLast: (Cart acceptingItemsOf: catalog).
	newCartID := newCartID+1.
	^newCartID! !

!testRun: #ClientRestInterfaceTest #test05CanAddItemsToMultipleCarts stamp: 'CL 11/11/2019 18:43:37'!
ERROR!

!testRun: #ClientRestInterfaceTest #test05CanAddItemsToMultipleCarts stamp: 'CL 11/11/2019 18:43:37'!
ERROR!
!ClientRestInterface methodsFor: 'initialization' stamp: 'CL 11/11/2019 18:44:21' prior: 50787072!
initializeAcceptingItemsOf: aCatalog andCheckingUsersWith: aUserChecker 
	
	catalog := aCatalog.
	userChecker := aUserChecker.
	newCartID := 0.
	clientsCarts := Dictionary new.! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 18:45:23' prior: 50787092!
createCartWithClientID: aClientID andPassword: aPassword

	userChecker isUserValid: aClientID withPassword: aPassword.
	newCartID := newCartID+1.
	clientsCarts add: newCartID->(Cart acceptingItemsOf: catalog).
	^newCartID! !

!testRun: #ClientRestInterfaceTest #test05CanAddItemsToMultipleCarts stamp: 'CL 11/11/2019 18:45:28'!
ERROR!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 18:45:56' prior: 50787065!
addToCart: aCartID thisAmount: anAmountOfItems ofThisItem: anItem 
	(clientsCarts at: aCartID) add: anAmountOfItems of: anItem! !

!testRun: #ClientRestInterfaceTest #test05CanAddItemsToMultipleCarts stamp: 'CL 11/11/2019 18:45:57'!
ERROR!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 18:46:18' prior: 50787057!
listCart: aCartID 
	|clientsList|
	clientsList := Bag new.
	(clientsCarts at: aCartID) visitItemsFrom: self with: [:item | clientsList add: item].
	^clientsList! !

!testRun: #ClientRestInterfaceTest #test05CanAddItemsToMultipleCarts stamp: 'CL 11/11/2019 18:46:19'!
PASSED!

!testRun: #ClientRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/11/2019 18:46:19'!
PASSED!

!testRun: #ClientRestInterfaceTest #test02CanNotCreateCartWithInvalidUser stamp: 'CL 11/11/2019 18:46:19'!
PASSED!

!testRun: #ClientRestInterfaceTest #test03ValidUserCanCreateMultipleCarts stamp: 'CL 11/11/2019 18:46:19'!
PASSED!

!testRun: #ClientRestInterfaceTest #test04CanAddItemsToCart stamp: 'CL 11/11/2019 18:46:19'!
PASSED!

!testRun: #ClientRestInterfaceTest #test05CanAddItemsToMultipleCarts stamp: 'CL 11/11/2019 18:46:19'!
PASSED!
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 18:54:00'!
test06CanCheckoutACart
	|aCartID aSalesInputRestInterface anItem|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	aSalesInputRestInterface 
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 19:21:02' prior: 50787172!
test06CanCheckoutACart
	|aCartID aSalesInputRestInterface anItem aCreditCardNumber aCreditCardOwnerName aCreditCardExpirationDate|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: self defaultClientID andPassword: self defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	aSalesInputRestInterface checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.
	self assert:(aSalesInputRestInterface listPurchasesOf: self defaultClientID withPassword: self defaultClientPassword ).! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 19:21:41'!
defaultClientID

		^'1'! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 19:21:53'!
defaultClientPassword

		^'1234'! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 19:26:25' prior: 50787190!
test06CanCheckoutACart
	|aCartID aSalesInputRestInterface anItem aCreditCardNumber aCreditCardOwnerName aCreditCardExpirationDate|

	aSalesInputRestInterface := self newClientRestInterface.
	aCartID := aSalesInputRestInterface createCartWithClientID: self defaultClientID andPassword: self defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	aCreditCardNumber := ''.
	aCreditCardExpirationDate := ''.
	aCreditCardOwnerName := ''.
	aSalesInputRestInterface checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.
	self assert:(aSalesInputRestInterface listPurchasesOf: self defaultClientID withPassword: self defaultClientPassword ) equals: testObjectsFactory itemSellByTheStore asString , '|2|'.! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 19:30:29' prior: 50787228!
test06CanCheckoutACart
	|aCartID aSalesInputRestInterface anItem aCreditCardNumber aCreditCardOwnerName aCreditCardExpirationDate|

	aSalesInputRestInterface := self newClientRestInterface.
	aCartID := aSalesInputRestInterface createCartWithClientID: self defaultClientID andPassword: self defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	aCreditCardNumber := self validCreditCardNumber.
	aCreditCardExpirationDate := self validCreditCardExpirationDate.
	aCreditCardOwnerName := self validCreditCardOwnerName.
	aSalesInputRestInterface checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.
	self assert:(aSalesInputRestInterface listPurchasesOf: self defaultClientID withPassword: self defaultClientPassword ) equals: testObjectsFactory itemSellByTheStore asString , '|2|'.! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 19:33:30' prior: 50787262!
test06CanCheckoutACart
	|aCartID aSalesInputRestInterface anItem aCreditCardNumber aCreditCardOwnerName aCreditCardExpirationDate|

	aSalesInputRestInterface := self newClientRestInterface.
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	aCreditCardNumber := testObjectsFactory validCreditCardNumber.
	aCreditCardExpirationDate := testObjectsFactory validCreditCardExpirationDate.
	aCreditCardOwnerName := testObjectsFactory validCreditCardOwnerName.
	aSalesInputRestInterface checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.
	self assert:(aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: testObjectsFactory defaultClientPassword ) equals: testObjectsFactory itemSellByTheStore asString , '|2|'.! !
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'CL 11/11/2019 19:34:02'!
defaultClientID

		^'1'! !
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'CL 11/11/2019 19:34:43'!
defaultClientPassword

		^'1234'! !

!methodRemoval: ClientRestInterfaceTest #defaultClientID stamp: 'CL 11/11/2019 19:34:53'!
defaultClientID

		^'1'!

!methodRemoval: ClientRestInterfaceTest #defaultClientPassword stamp: 'CL 11/11/2019 19:34:58'!
defaultClientPassword

		^'1234'!

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/11/2019 19:35:35'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'CL 11/11/2019 19:40:46'!
validCreditCardNumber

	^'1'! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'CL 11/11/2019 19:41:42'!
validCreditCardExpirationDate.
	^'s'! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 19:42:29'!
validCreditCardOwnerName

	^'validCCOwner'! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 19:43:52' prior: 50787361!
validCreditCardExpirationDate.
	
	^(Month month: today monthIndex year: today yearNumber - 1) asString! !

(Month month: DateAndTime now monthIndex year: DateAndTime now yearNumber - 1) asString!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 19:44:30' prior: 50787371!
validCreditCardExpirationDate.
	
	^(Month month: DateAndTime now monthIndex year: DateAndTime now yearNumber + 1) asString! !

|aValidExpirationDate|
	aValidExpirationDate := (Month month: DateAndTime now monthIndex year: DateAndTime now yearNumber + 1).
	aValidExpirationDate monthIndex asString , aValidExpirationDate year asString!

aValidExpirationDate := (Month month: DateAndTime now monthIndex year: DateAndTime now yearNumber + 1).!

aValidExpirationDate monthIndex asString , aValidExpirationDate year asString!

aValidExpirationDate monthIndex!

aValidExpirationDate monthIndex asString!

aValidExpirationDate year!

aValidExpirationDate monthIndex asString , aValidExpirationDate yearNumber asString!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 19:48:44' prior: 50787381!
validCreditCardExpirationDate
	|aValidExpirationDate|
	aValidExpirationDate := (Month month: today monthIndex year: today yearNumber + 1).
	^aValidExpirationDate monthIndex asString , aValidExpirationDate yearNumber asString! !

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/11/2019 19:53:06'!
ERROR!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 19:53:31'!
checkoutCart: aSmallInteger withCCN: aString withCCED: aString3 withCCO: aString4 
	self shouldBeImplemented.! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 19:59:23' prior: 50787420!
checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: aCreditCardExpirationDate withCCO: aCreditCardOwner

	 | aCreditCard |
aCreditCard := CreditCard withCCN: aCreditCardNumber withCCED: aCreditCardExpirationDate withCCO: aCreditCardOwner.! !

!classDefinition: #ClientRestInterface category: #TusLibros stamp: 'CL 11/11/2019 20:05:11'!
Object subclass: #ClientRestInterface
	instanceVariableNames: 'catalog clientsCarts inputRestInterfaceTest userChecker newCartID merchantProcessor'
	classVariableNames: 'ClientsCart'
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClientRestInterface category: #TusLibros stamp: 'CL 11/11/2019 20:05:12'!
Object subclass: #ClientRestInterface
	instanceVariableNames: 'catalog clientsCarts inputRestInterfaceTest userChecker newCartID merchantProcessor salesBook'
	classVariableNames: 'ClientsCart'
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 20:05:09' prior: 50787427!
checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: aCreditCardExpirationDate withCCO: aCreditCardOwner
	| aCreditCard |

	aCreditCard := CreditCard withCCN: aCreditCardNumber withCCED: aCreditCardExpirationDate withCCO: aCreditCardOwner.
	Cashier toCheckout: clientsCarts at: aCartID charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook.! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 20:05:38' prior: 50787459!
checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: aCreditCardExpirationDate withCCO: aCreditCardOwner
	| aCreditCard |

	aCreditCard := CreditCard withCCN: aCreditCardNumber withCCED: aCreditCardExpirationDate withCCO: aCreditCardOwner.
	Cashier toCheckout: clientsCarts at: aCartID charging: aCreditCard throught: merchantProcessor on: (DateAndTime now) registeringOn: salesBook.! !

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/11/2019 20:05:56'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'CL 11/11/2019 20:06:03'!
withCCN: aString withCCED: aString2 withCCO: aString3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCCN: aString withCCED: aString2 withCCO: aString3 ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'CL 11/11/2019 20:08:43' prior: 50787493!
withCCN: aCreditcardNumber withCCED: aCreditCardExpirationDate withCCO: aCreditCardOwner 
	
	^self new initializeWithCCN: aCreditcardNumber withCCED: aCreditCardExpirationDate withCCO: aCreditCardOwner! !

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/11/2019 20:08:54'!
ERROR!

!classDefinition: #CreditCard category: #TusLibros stamp: 'CL 11/11/2019 20:09:05'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration creditcardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'CL 11/11/2019 20:09:05'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration creditcardNumber creditCardExpirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'CL 11/11/2019 20:09:05'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration creditcardNumber creditCardExpirationDate creditCardOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'CL 11/11/2019 20:09:05'!
initializeWithCCN: aCreditcardNumber withCCED: aCreditCardExpirationDate withCCO: aCreditCardOwner 
	self shouldBeImplemented.
	creditcardNumber := aCreditcardNumber.
	creditCardExpirationDate := aCreditCardExpirationDate.
	creditCardOwner := aCreditCardOwner.! !
!CreditCard methodsFor: 'initialization' stamp: 'CL 11/11/2019 20:09:13' prior: 50787541!
initializeWithCCN: aCreditcardNumber withCCED: aCreditCardExpirationDate withCCO: aCreditCardOwner 
	
	creditcardNumber := aCreditcardNumber.
	creditCardExpirationDate := aCreditCardExpirationDate.
	creditCardOwner := aCreditCardOwner.! !

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/11/2019 20:09:16'!
ERROR!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 20:10:38' prior: 50787475!
checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: aCreditCardExpirationDate withCCO: aCreditCardOwner
	| aCreditCard |

	aCreditCard := CreditCard withCCN: aCreditCardNumber withCCED: aCreditCardExpirationDate withCCO: aCreditCardOwner.
	Cashier toCheckout: (clientsCarts at: aCartID) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook.! !

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/11/2019 20:10:45'!
ERROR!
!CreditCard methodsFor: 'initialization' stamp: 'CL 11/11/2019 20:11:39' prior: 50787553!
initializeWithCCN: aCreditcardNumber withCCED: aCreditCardExpirationDate withCCO: aCreditCardOwner 
	
	creditcardNumber := aCreditcardNumber.
	expiration := aCreditCardExpirationDate.
	creditCardOwner := aCreditCardOwner.! !

Object subclass: #CreditCard
	instanceVariableNames: 'expiration creditcardNumber creditCardOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'CL 11/11/2019 20:11:49'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration creditcardNumber creditCardOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'CL 11/11/2019 20:37:41'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardExpirationDate creditcardNumber creditCardOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 20:37:41' prior: 50785623!
isExpiredOn: aDate 
	
	^creditCardExpirationDate start < (Month month: aDate monthIndex year: aDate yearNumber) start ! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 20:37:41' prior: 50787586!
initializeWithCCN: aCreditcardNumber withCCED: aCreditCardExpirationDate withCCO: aCreditCardOwner 
	
	creditcardNumber := aCreditcardNumber.
	creditCardExpirationDate := aCreditCardExpirationDate.
	creditCardOwner := aCreditCardOwner.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 20:37:41' prior: 50785629!
initializeExpiringOn: aMonth 
	
	creditCardExpirationDate := aMonth ! !

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/11/2019 20:38:35'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'CL 11/11/2019 20:40:11' prior: 50787504!
withCCN: aCreditcardNumber withCCED: aCreditCardExpirationDate withCCO: aCreditCardOwner 
	
	^self new initializeWithCCN: aCreditcardNumber withCCED: aCreditCardExpirationDate withCCO: aCreditCardOwner! !
!CreditCard methodsFor: 'initialization' stamp: 'CL 11/11/2019 20:41:03' prior: 50787625!
initializeWithCCN: aCreditcardNumber withCCED: aCreditCardExpirationDate withCCO: aCreditCardOwner 
	
	creditcardNumber := aCreditcardNumber.
	creditCardExpirationDate := self toGregorianMonthOfYear: aCreditCardExpirationDate.
	creditCardOwner := aCreditCardOwner.! !
!CreditCard methodsFor: 'initialization' stamp: 'CL 11/11/2019 20:44:29'!
toGregorianMonthOfYear: aCreditCardExpirationDate
	| aCreditCardExpirationMonth aCreditCardExpirationYear |
	aCreditCardExpirationMonth _ (aCreditCardExpirationDate copyFrom: 1 to: 2) asNumber.
	aCreditCardExpirationYear _ (aCreditCardExpirationDate copyFrom: 3 to: 6) asNumber.! !
!CreditCard methodsFor: 'initialization' stamp: 'CL 11/11/2019 20:45:27' prior: 50787666!
toGregorianMonthOfYear: aCreditCardExpirationDate
	| aCreditCardExpirationMonth aCreditCardExpirationYear |
	aCreditCardExpirationMonth _ (aCreditCardExpirationDate copyFrom: 1 to: 2) asNumber.
	aCreditCardExpirationYear _ (aCreditCardExpirationDate copyFrom: 3 to: 6) asNumber.
	^Month month: aCreditCardExpirationMonth year: aCreditCardExpirationYear! !
!CreditCard methodsFor: 'private' stamp: 'CL 11/11/2019 20:46:16' prior: 50787678!
toGregorianMonthOfYear: aCreditCardExpirationDate
	| aCreditCardExpirationMonth aCreditCardExpirationYear |
	aCreditCardExpirationMonth _ (aCreditCardExpirationDate copyFrom: 1 to: 2) asNumber.
	aCreditCardExpirationYear _ (aCreditCardExpirationDate copyFrom: 3 to: 6) asNumber.
	^Month month: aCreditCardExpirationMonth year: aCreditCardExpirationYear.
	! !
!CreditCard methodsFor: 'private' stamp: 'CL 11/11/2019 20:46:20' prior: 50787692!
toGregorianMonthOfYear: aCreditCardExpirationDate
	| aCreditCardExpirationMonth aCreditCardExpirationYear |
	aCreditCardExpirationMonth _ (aCreditCardExpirationDate copyFrom: 1 to: 2) asNumber.
	aCreditCardExpirationYear _ (aCreditCardExpirationDate copyFrom: 3 to: 6) asNumber.
	^Month month: aCreditCardExpirationMonth year: aCreditCardExpirationYear.! !

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/11/2019 20:47:20'!
ERROR!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 20:47:35'!
listPurchasesOf: aString withPassword: aString2 
	self shouldBeImplemented.! !

!classDefinition: #ClientRestInterface category: #TusLibros stamp: 'CL 11/11/2019 21:09:47'!
Object subclass: #ClientRestInterface
	instanceVariableNames: 'catalog clientsCarts inputRestInterfaceTest userChecker newCartID merchantProcessor salesBook clients'
	classVariableNames: 'ClientsCart'
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 21:09:43' prior: 50787724!
listPurchasesOf: aClientID withPassword: aClientPassword

	| cartsList clientCarts |
	clientCarts := clients at: aClientID." ifAbsent: [^'0']."
	cartsList := (self listCart: (clientCarts at:1)) sortedElements inject:'' into:[:aCartList :anItemAndAmount | aCartList , anItemAndAmount key asString , '|' , anItemAndAmount value asString].
	(clientsCarts at: clientCarts total) asString ! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 21:10:29' prior: 50787741!
listPurchasesOf: aClientID withPassword: aClientPassword

	| cartsList clientCarts |
	clientCarts := clients at: aClientID." ifAbsent: [^'0']."
	cartsList := (self listCart: (clientCarts at:1)) sortedElements inject:'' into:[:aCartList :anItemAndAmount | aCartList , anItemAndAmount key asString , '|' , anItemAndAmount value asString , '|'].
	^cartsList , (clientsCarts at: clientCarts total) asString ! !

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/11/2019 21:10:42'!
ERROR!
!ClientRestInterface methodsFor: 'initialization' stamp: 'CL 11/11/2019 21:12:04' prior: 50787109!
initializeAcceptingItemsOf: aCatalog andCheckingUsersWith: aUserChecker 
	
	catalog := aCatalog.
	userChecker := aUserChecker.
	newCartID := 0.
	clientsCarts := Dictionary new.
	clients := Dictionary new.! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 21:15:50' prior: 50787118!
createCartWithClientID: aClientID andPassword: aPassword

	userChecker isUserValid: aClientID withPassword: aPassword.
	newCartID := newCartID+1.
	clientsCarts add: newCartID->(Cart acceptingItemsOf: catalog).
	clients add: aClientID->((clients at: aClientID ifAbsent:[OrderedCollection new]) addLast: newCartID).
	^newCartID! !

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/11/2019 21:16:01'!
ERROR!

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/11/2019 21:16:01'!
ERROR!

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/11/2019 21:17:47'!
ERROR!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 21:18:46' prior: 50787786!
createCartWithClientID: aClientID andPassword: aPassword

	userChecker isUserValid: aClientID withPassword: aPassword.
	newCartID := newCartID+1.
	clientsCarts add: newCartID->(Cart acceptingItemsOf: catalog).
	clients add: aClientID->((clients at: aClientID ifAbsent:[^OrderedCollection new]) addLast: newCartID).
	^newCartID! !

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/11/2019 21:18:52'!
ERROR!

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/11/2019 21:20:09'!
ERROR!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 21:23:46' prior: 50787809!
createCartWithClientID: aClientID andPassword: aPassword

	userChecker isUserValid: aClientID withPassword: aPassword.
	newCartID := newCartID+1.
	clientsCarts add: newCartID->(Cart acceptingItemsOf: catalog).
	clients add: aClientID->((clients at: aClientID ifAbsent:[^OrderedCollection new]) addLast: newCartID).
	newCartID:=newCartID.
	^newCartID! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 21:24:38' prior: 50787829!
createCartWithClientID: aClientID andPassword: aPassword

	userChecker isUserValid: aClientID withPassword: aPassword.
	newCartID := newCartID+1.
	clientsCarts add: newCartID->(Cart acceptingItemsOf: catalog).
	clients add: aClientID->((clients at: aClientID ifAbsent:[^OrderedCollection new]) addLast: newCartID).
	newCartID:=newCartID+1.
	^newCartID! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 21:25:13' prior: 50787844!
createCartWithClientID: aClientID andPassword: aPassword

	userChecker isUserValid: aClientID withPassword: aPassword.
	newCartID := newCartID+1.
	clientsCarts add: newCartID->(Cart acceptingItemsOf: catalog).
	clients add: aClientID->((clients at: aClientID ifAbsent:[OrderedCollection new]) addLast: newCartID).
	^newCartID! !

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/11/2019 21:25:18'!
ERROR!

((clients at: aClientID ifAbsent:[OrderedCollection new]) addLast: newCartID).!

(clients at: aClientID ifAbsent:[OrderedCollection new])!

(clients at: aClientID ifAbsent:[OrderedCollection new]) addLast: newCartID!

(clients at: aClientID ifAbsent:[OrderedCollection new])!

(clients at: aClientID ifAbsent:[OrderedCollection new])!

(clients at: aClientID ifAbsent:[OrderedCollection new]) addLast: newCartID!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 21:30:18' prior: 50787859!
createCartWithClientID: aClientID andPassword: aPassword

	| collectionOfCartIDs |
	userChecker isUserValid: aClientID withPassword: aPassword.
	newCartID := newCartID+1.
	clientsCarts add: newCartID->(Cart acceptingItemsOf: catalog).
	collectionOfCartIDs := OrderedCollection new.
	(clients at: aClientID ifAbsent:[collectionOfCartIDs]) addLast: newCartID.
	clients add: aClientID->collectionOfCartIDs.
	^newCartID! !

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/11/2019 21:30:23'!
ERROR!

clientsCarts at: clientCarts!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 21:32:17' prior: 50787757!
listPurchasesOf: aClientID withPassword: aClientPassword

	| cartsList clientCarts |
	clientCarts := clients at: aClientID." ifAbsent: [^'0']."
	cartsList := (self listCart: (clientCarts at:1)) sortedElements inject:'' into:[:aCartList :anItemAndAmount | aCartList , anItemAndAmount key asString , '|' , anItemAndAmount value asString , '|'].
	^cartsList , ((clientsCarts at: (clientCarts at: 1)) total) asString ! !

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/11/2019 21:33:05'!
FAILURE!

(aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: testObjectsFactory defaultClientPassword )!
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 21:36:29' prior: 50787299!
test06CanCheckoutACart
	|aCartID aSalesInputRestInterface anItem aCreditCardNumber aCreditCardOwnerName aCreditCardExpirationDate|

	aSalesInputRestInterface := self newClientRestInterface.
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	aCreditCardNumber := testObjectsFactory validCreditCardNumber.
	aCreditCardExpirationDate := testObjectsFactory validCreditCardExpirationDate.
	aCreditCardOwnerName := testObjectsFactory validCreditCardOwnerName.
	aSalesInputRestInterface checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.
	self assert:(aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: testObjectsFactory defaultClientPassword ) equals: anItem asString , '|2|' , ((testObjectsFactory defaultCatalog at: anItem)*2) asString.! !

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/11/2019 21:36:33'!
PASSED!

!testRun: #ClientRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/11/2019 21:36:33'!
PASSED!

!testRun: #ClientRestInterfaceTest #test02CanNotCreateCartWithInvalidUser stamp: 'CL 11/11/2019 21:36:33'!
PASSED!

!testRun: #ClientRestInterfaceTest #test03ValidUserCanCreateMultipleCarts stamp: 'CL 11/11/2019 21:36:33'!
PASSED!

!testRun: #ClientRestInterfaceTest #test04CanAddItemsToCart stamp: 'CL 11/11/2019 21:36:33'!
PASSED!

!testRun: #ClientRestInterfaceTest #test05CanAddItemsToMultipleCarts stamp: 'CL 11/11/2019 21:36:33'!
PASSED!

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/11/2019 21:36:33'!
PASSED!

----QUIT----(11 November 2019 21:47:26) CuisUniversity-3938.image priorSource: 14563395!

----STARTUP---- (14 November 2019 11:10:43) as /home/cliberman/Descargas/linux64/CuisUniversity-3938.image!


!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/14/2019 11:11:33'!
PASSED!
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 11:17:25'!
test07CanCheckoutMoreThanOneCart
	|aCartID aSalesInputRestInterface anItem aCreditCardNumber aCreditCardOwnerName aCreditCardExpirationDate aSecondCartID |

	aSalesInputRestInterface := self newClientRestInterface.
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	aSecondCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 3 ofThisItem: anItem.
	aCreditCardNumber := testObjectsFactory validCreditCardNumber.
	aCreditCardExpirationDate := testObjectsFactory validCreditCardExpirationDate.
	aCreditCardOwnerName := testObjectsFactory validCreditCardOwnerName.
	aSalesInputRestInterface checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.
	self assert: ((aSalesInputRestInterface listCart: aSecondCartID) occurrencesOf: anItem) equals: 3.
	self assert:(aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: testObjectsFactory defaultClientPassword ) equals: anItem asString , '|5|' , ((testObjectsFactory defaultCatalog at: anItem)*5) asString.! !

!testRun: #ClientRestInterfaceTest #test07CanCheckoutMoreThanOneCart stamp: 'CL 11/14/2019 11:18:05'!
FAILURE!

!testRun: #ClientRestInterfaceTest #test07CanCheckoutMoreThanOneCart stamp: 'CL 11/14/2019 11:18:05'!
FAILURE!

!testRun: #ClientRestInterfaceTest #test07CanCheckoutMoreThanOneCart stamp: 'CL 11/14/2019 11:19:50'!
FAILURE!

!testRun: #ClientRestInterfaceTest #test07CanCheckoutMoreThanOneCart stamp: 'CL 11/14/2019 11:20:48'!
FAILURE!

!testRun: #ClientRestInterfaceTest #test07CanCheckoutMoreThanOneCart stamp: 'CL 11/14/2019 11:20:48'!
FAILURE!
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 11:23:10' prior: 50788007!
test07CanCheckoutMoreThanOneCart
	|aCartID aSalesInputRestInterface anItem aCreditCardNumber aCreditCardOwnerName aCreditCardExpirationDate aSecondCartID |

	aSalesInputRestInterface := self newClientRestInterface.
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	aSecondCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	aSalesInputRestInterface addToCart: aSecondCartID thisAmount: 3 ofThisItem: anItem.
	aCreditCardNumber := testObjectsFactory validCreditCardNumber.
	aCreditCardExpirationDate := testObjectsFactory validCreditCardExpirationDate.
	aCreditCardOwnerName := testObjectsFactory validCreditCardOwnerName.
	aSalesInputRestInterface checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.
	aSalesInputRestInterface checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.
	self assert: ((aSalesInputRestInterface listCart: aSecondCartID) occurrencesOf: anItem) equals: 3.
	self assert:(aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: testObjectsFactory defaultClientPassword ) equals: anItem asString , '|5|' , ((testObjectsFactory defaultCatalog at: anItem)*5) asString.! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 11:23:46'!
test07CanListPurchasesOfMoreThanOneCart
	|aCartID aSalesInputRestInterface anItem aCreditCardNumber aCreditCardOwnerName aCreditCardExpirationDate aSecondCartID |

	aSalesInputRestInterface := self newClientRestInterface.
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	aSecondCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	aSalesInputRestInterface addToCart: aSecondCartID thisAmount: 3 ofThisItem: anItem.
	aCreditCardNumber := testObjectsFactory validCreditCardNumber.
	aCreditCardExpirationDate := testObjectsFactory validCreditCardExpirationDate.
	aCreditCardOwnerName := testObjectsFactory validCreditCardOwnerName.
	aSalesInputRestInterface checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.
	aSalesInputRestInterface checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.
	self assert: ((aSalesInputRestInterface listCart: aSecondCartID) occurrencesOf: anItem) equals: 3.
	self assert:(aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: testObjectsFactory defaultClientPassword ) equals: anItem asString , '|5|' , ((testObjectsFactory defaultCatalog at: anItem)*5) asString.! !

!methodRemoval: ClientRestInterfaceTest #test07CanCheckoutMoreThanOneCart stamp: 'CL 11/14/2019 11:23:46'!
test07CanCheckoutMoreThanOneCart
	|aCartID aSalesInputRestInterface anItem aCreditCardNumber aCreditCardOwnerName aCreditCardExpirationDate aSecondCartID |

	aSalesInputRestInterface := self newClientRestInterface.
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	aSecondCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	aSalesInputRestInterface addToCart: aSecondCartID thisAmount: 3 ofThisItem: anItem.
	aCreditCardNumber := testObjectsFactory validCreditCardNumber.
	aCreditCardExpirationDate := testObjectsFactory validCreditCardExpirationDate.
	aCreditCardOwnerName := testObjectsFactory validCreditCardOwnerName.
	aSalesInputRestInterface checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.
	aSalesInputRestInterface checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.
	self assert: ((aSalesInputRestInterface listCart: aSecondCartID) occurrencesOf: anItem) equals: 3.
	self assert:(aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: testObjectsFactory defaultClientPassword ) equals: anItem asString , '|5|' , ((testObjectsFactory defaultCatalog at: anItem)*5) asString.!
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 11:24:07' prior: 50788132!
test07CanListPurchasesOfMoreThanOneCart
	|aCartID aSalesInputRestInterface anItem aCreditCardNumber aCreditCardOwnerName aCreditCardExpirationDate aSecondCartID |

	aSalesInputRestInterface := self newClientRestInterface.
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	aSecondCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	aSalesInputRestInterface addToCart: aSecondCartID thisAmount: 3 ofThisItem: anItem.
	aCreditCardNumber := testObjectsFactory validCreditCardNumber.
	aCreditCardExpirationDate := testObjectsFactory validCreditCardExpirationDate.
	aCreditCardOwnerName := testObjectsFactory validCreditCardOwnerName.
	aSalesInputRestInterface checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.
	aSalesInputRestInterface checkoutCart: aSecondCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.
	self assert: ((aSalesInputRestInterface listCart: aSecondCartID) occurrencesOf: anItem) equals: 3.
	self assert:(aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: testObjectsFactory defaultClientPassword ) equals: anItem asString , '|5|' , ((testObjectsFactory defaultCatalog at: anItem)*5) asString.! !

!testRun: #ClientRestInterfaceTest #test07CanListPurchasesOfMoreThanOneCart stamp: 'CL 11/14/2019 11:24:07'!
ERROR!

!testRun: #ClientRestInterfaceTest #test07CanListPurchasesOfMoreThanOneCart stamp: 'CL 11/14/2019 11:24:30'!
ERROR!

!testRun: #ClientRestInterfaceTest #test07CanListPurchasesOfMoreThanOneCart stamp: 'CL 11/14/2019 11:24:37'!
ERROR!

clients at: aClientID!

clientCarts at:1!

clientCarts at:1!

clientCarts!

clients at: aClientID!
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 11:32:05' prior: 50788245!
test07CanListPurchasesOfMoreThanOneCart
	|aCartID aSalesInputRestInterface anItem aCreditCardNumber aCreditCardOwnerName aCreditCardExpirationDate aSecondCartID |

	aSalesInputRestInterface := self newClientRestInterface.
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	aSecondCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	aSalesInputRestInterface addToCart: aSecondCartID thisAmount: 3 ofThisItem: anItem.
	aCreditCardNumber := testObjectsFactory validCreditCardNumber.
	aCreditCardExpirationDate := testObjectsFactory validCreditCardExpirationDate.
	aCreditCardOwnerName := testObjectsFactory validCreditCardOwnerName.
	aSalesInputRestInterface checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.
	aSalesInputRestInterface checkoutCart: aSecondCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.
	self assert: ((aSalesInputRestInterface listCart: aSecondCartID) occurrencesOf: anItem) equals: 5.
	self assert:(aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: testObjectsFactory defaultClientPassword ) equals: anItem asString , '|5|' , ((testObjectsFactory defaultCatalog at: anItem)*5) asString.! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 11:32:11' prior: 50788316!
test07CanListPurchasesOfMoreThanOneCart
	|aCartID aSalesInputRestInterface anItem aCreditCardNumber aCreditCardOwnerName aCreditCardExpirationDate aSecondCartID |

	aSalesInputRestInterface := self newClientRestInterface.
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	aSecondCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	aSalesInputRestInterface addToCart: aSecondCartID thisAmount: 5 ofThisItem: anItem.
	aCreditCardNumber := testObjectsFactory validCreditCardNumber.
	aCreditCardExpirationDate := testObjectsFactory validCreditCardExpirationDate.
	aCreditCardOwnerName := testObjectsFactory validCreditCardOwnerName.
	aSalesInputRestInterface checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.
	aSalesInputRestInterface checkoutCart: aSecondCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.
	self assert: ((aSalesInputRestInterface listCart: aSecondCartID) occurrencesOf: anItem) equals: 5.
	self assert:(aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: testObjectsFactory defaultClientPassword ) equals: anItem asString , '|5|' , ((testObjectsFactory defaultCatalog at: anItem)*5) asString.! !

!testRun: #ClientRestInterfaceTest #test07CanListPurchasesOfMoreThanOneCart stamp: 'CL 11/14/2019 11:32:17'!
ERROR!

clients at: aClientID!

!testRun: #ClientRestInterfaceTest #test07CanListPurchasesOfMoreThanOneCart stamp: 'CL 11/14/2019 11:33:37'!
ERROR!

clients at: aClientID!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 11:36:53' prior: 50787889!
createCartWithClientID: aClientID andPassword: aPassword

	| collectionOfCartIDs |
	userChecker isUserValid: aClientID withPassword: aPassword.
	newCartID := newCartID+1.
	clientsCarts add: newCartID->(Cart acceptingItemsOf: catalog).
	collectionOfCartIDs := OrderedCollection new.
	clients add: aClientID->((clients at: aClientID ifAbsent:[collectionOfCartIDs]) addLast: newCartID).
	^newCartID! !

!testRun: #ClientRestInterfaceTest #test07CanListPurchasesOfMoreThanOneCart stamp: 'CL 11/14/2019 11:37:12'!
ERROR!

(clients at: aClientID ifAbsent:[collectionOfCartIDs])!

((clients at: aClientID ifAbsent:[collectionOfCartIDs]) addLast: newCartID)!

(clients at: aClientID ifAbsent:[collectionOfCartIDs])!

clients at: aClientID ifAbsent:[collectionOfCartIDs]!

clients at: aClientID!

collectionOfCartIDs!

clients at: aClientID ifAbsent:[collectionOfCartIDs]!

clients at: aClientID ifAbsent:[^collectionOfCartIDs]!

(clients at: aClientID ifAbsent:[OrderedCollection new])!

(clients at: aClientID ifAbsent:[OrderedCollection new]) addLast: newCartID!

(clients at: aClientID ifAbsent:[OrderedCollection new])!

(clients at: aClientID ifAbsent:[OrderedCollection new]) addLast: newCartID!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 11:43:15' prior: 50788439!
createCartWithClientID: aClientID andPassword: aPassword

	| collectionOfCartIDs |
	userChecker isUserValid: aClientID withPassword: aPassword.
	newCartID := newCartID+1.
	clientsCarts add: newCartID->(Cart acceptingItemsOf: catalog).
	collectionOfCartIDs := OrderedCollection new.
	clients add: aClientID->((clients at: aClientID ifAbsent:[OrderedCollection new]) addLast: newCartID).
	^newCartID! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 11:44:40' prior: 50788480!
createCartWithClientID: aClientID andPassword: aPassword

	| collectionOfCartIDs |
	userChecker isUserValid: aClientID withPassword: aPassword.
	newCartID := newCartID+1.
	clientsCarts add: newCartID->(Cart acceptingItemsOf: catalog).
	collectionOfCartIDs := OrderedCollection new.
	clients add: aClientID->((clients at: aClientID ifAbsent:[OrderedCollection new]) add: newCartID).
	^newCartID! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 11:44:48' prior: 50788496!
createCartWithClientID: aClientID andPassword: aPassword

	| |
	userChecker isUserValid: aClientID withPassword: aPassword.
	newCartID := newCartID+1.
	clientsCarts add: newCartID->(Cart acceptingItemsOf: catalog).
	clients add: aClientID->((clients at: aClientID ifAbsent:[OrderedCollection new]) add: newCartID).
	^newCartID! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 11:44:54' prior: 50788512!
createCartWithClientID: aClientID andPassword: aPassword

	userChecker isUserValid: aClientID withPassword: aPassword.
	newCartID := newCartID+1.
	clientsCarts add: newCartID->(Cart acceptingItemsOf: catalog).
	clients add: aClientID->((clients at: aClientID ifAbsent:[OrderedCollection new]) add: newCartID).
	^newCartID! !

!testRun: #ClientRestInterfaceTest #test07CanListPurchasesOfMoreThanOneCart stamp: 'CL 11/14/2019 11:44:56'!
ERROR!

(clients at: aClientID ifAbsent:[OrderedCollection new]) add: newCartID!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/11/2019 21:30:18' prior: 50788526!
createCartWithClientID: aClientID andPassword: aPassword

	| collectionOfCartIDs |
	userChecker isUserValid: aClientID withPassword: aPassword.
	newCartID := newCartID+1.
	clientsCarts add: newCartID->(Cart acceptingItemsOf: catalog).
	collectionOfCartIDs := OrderedCollection new.
	(clients at: aClientID ifAbsent:[collectionOfCartIDs]) addLast: newCartID.
	clients add: aClientID->collectionOfCartIDs.
	^newCartID! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 11:51:26' prior: 50788546!
createCartWithClientID: aClientID andPassword: aPassword

	| collectionOfCartIDs |
	userChecker isUserValid: aClientID withPassword: aPassword.
	newCartID := newCartID+1.
	clientsCarts add: newCartID->(Cart acceptingItemsOf: catalog).
	collectionOfCartIDs := (clients at: aClientID ifAbsent:[OrderedCollection new]).
	collectionOfCartIDs addLast: newCartID.
	clients add: aClientID->collectionOfCartIDs.
	^newCartID! !

!testRun: #ClientRestInterfaceTest #test07CanListPurchasesOfMoreThanOneCart stamp: 'CL 11/14/2019 11:51:32'!
FAILURE!

Bag!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:08:42' prior: 50787910!
listPurchasesOf: aClientID withPassword: aClientPassword

	| cartsList clientCarts clientCartsIndex totalItems totalPrice |
	clientCarts := clients at: aClientID." ifAbsent: [^'0']."
	clientCartsIndex := 1.
	totalItems := Bag new.
	totalPrice:= 0.
	(clientCartsIndex < clientCarts size) whileTrue: 
	[totalItems addAll: (self listCart: (clientCarts at: clientCartsIndex)). 
		totalPrice := (clientsCarts at: (clientCarts at: 1)) total.
		clientCartsIndex := clientCartsIndex + 1].
	cartsList := totalItems sortedElements inject:'' into:[:aCartList :anItemAndAmount | aCartList , anItemAndAmount key asString , '|' , anItemAndAmount value asString , '|'].
	^cartsList , totalPrice asString! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:09:06' prior: 50788584!
listPurchasesOf: aClientID withPassword: aClientPassword

	| cartsList clientCarts clientCartsIndex totalItems totalPrice |
	clientCarts := clients at: aClientID." ifAbsent: [^'0']."
	clientCartsIndex := 1.
	totalItems := Bag new.
	totalPrice:= 0.
	(clientCartsIndex < clientCarts size) whileTrue: 
	[totalItems addAll: (self listCart: (clientCarts at: clientCartsIndex)). 
		totalPrice := totalPrice + (clientsCarts at: (clientCarts at: clientCartsIndex)) total.
		clientCartsIndex := clientCartsIndex + 1].
	cartsList := totalItems sortedElements inject:'' into:[:aCartList :anItemAndAmount | aCartList , anItemAndAmount key asString , '|' , anItemAndAmount value asString , '|'].
	^cartsList , totalPrice asString! !

!testRun: #ClientRestInterfaceTest #test07CanListPurchasesOfMoreThanOneCart stamp: 'CL 11/14/2019 12:09:14'!
ERROR!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:10:21' prior: 50788609!
listPurchasesOf: aClientID withPassword: aClientPassword

	| cartsList clientCarts clientCartsIndex totalItems totalPrice |
	clientCarts := clients at: aClientID." ifAbsent: [^'0']."
	clientCartsIndex := 1.
	totalItems := Bag new.
	totalPrice:= 0.
	[clientCartsIndex < clientCarts size] whileTrue: 
	[totalItems addAll: (self listCart: (clientCarts at: clientCartsIndex)). 
		totalPrice := totalPrice + (clientsCarts at: (clientCarts at: clientCartsIndex)) total.
		clientCartsIndex := clientCartsIndex + 1].
	cartsList := totalItems sortedElements inject:'' into:[:aCartList :anItemAndAmount | aCartList , anItemAndAmount key asString , '|' , anItemAndAmount value asString , '|'].
	^cartsList , totalPrice asString! !

!testRun: #ClientRestInterfaceTest #test07CanListPurchasesOfMoreThanOneCart stamp: 'CL 11/14/2019 12:10:23'!
FAILURE!
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:11:58' prior: 50788373!
test07CanListPurchasesOfMoreThanOneCart
	|aCartID aSalesInputRestInterface anItem aCreditCardNumber aCreditCardOwnerName aCreditCardExpirationDate aSecondCartID |

	aSalesInputRestInterface := self newClientRestInterface.
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	aSecondCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	aSalesInputRestInterface addToCart: aSecondCartID thisAmount: 3 ofThisItem: anItem.
	aCreditCardNumber := testObjectsFactory validCreditCardNumber.
	aCreditCardExpirationDate := testObjectsFactory validCreditCardExpirationDate.
	aCreditCardOwnerName := testObjectsFactory validCreditCardOwnerName.
	aSalesInputRestInterface checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.
	aSalesInputRestInterface checkoutCart: aSecondCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.
	self assert: ((aSalesInputRestInterface listCart: aSecondCartID) occurrencesOf: anItem) equals: 3.
	self assert:(aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: testObjectsFactory defaultClientPassword ) equals: anItem asString , '|5|' , ((testObjectsFactory defaultCatalog at: anItem)*5) asString.! !

!testRun: #ClientRestInterfaceTest #test07CanListPurchasesOfMoreThanOneCart stamp: 'CL 11/14/2019 12:12:02'!
FAILURE!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:13:15' prior: 50788639!
listPurchasesOf: aClientID withPassword: aClientPassword

	| cartsList clientCarts clientCartsIndex totalItems totalPrice |
	clientCarts := clients at: aClientID." ifAbsent: [^'0']."
	clientCartsIndex := 1.
	totalItems := Bag new.
	totalPrice:= 0.
	[clientCartsIndex <= clientCarts size] whileTrue: 
	[totalItems addAll: (self listCart: (clientCarts at: clientCartsIndex)). 
		totalPrice := totalPrice + (clientsCarts at: (clientCarts at: clientCartsIndex)) total.
		clientCartsIndex := clientCartsIndex + 1].
	cartsList := totalItems sortedElements inject:'' into:[:aCartList :anItemAndAmount | aCartList , anItemAndAmount key asString , '|' , anItemAndAmount value asString , '|'].
	^cartsList , totalPrice asString! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:13:30' prior: 50788730!
listPurchasesOf: aClientID withPassword: aClientPassword

	| cartsList clientCarts clientCartsIndex totalItems totalPrice |
	clientCarts := clients at: aClientID ifAbsent: [^'0'].
	clientCartsIndex := 1.
	totalItems := Bag new.
	totalPrice:= 0.
	[clientCartsIndex <= clientCarts size] whileTrue: 
	[totalItems addAll: (self listCart: (clientCarts at: clientCartsIndex)). 
		totalPrice := totalPrice + (clientsCarts at: (clientCarts at: clientCartsIndex)) total.
		clientCartsIndex := clientCartsIndex + 1].
	cartsList := totalItems sortedElements inject:'' into:[:aCartList :anItemAndAmount | aCartList , anItemAndAmount key asString , '|' , anItemAndAmount value asString , '|'].
	^cartsList , totalPrice asString! !

!testRun: #ClientRestInterfaceTest #test07CanListPurchasesOfMoreThanOneCart stamp: 'CL 11/14/2019 12:13:51'!
PASSED!

!testRun: #ClientRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/14/2019 12:13:51'!
PASSED!

!testRun: #ClientRestInterfaceTest #test02CanNotCreateCartWithInvalidUser stamp: 'CL 11/14/2019 12:13:51'!
PASSED!

!testRun: #ClientRestInterfaceTest #test03ValidUserCanCreateMultipleCarts stamp: 'CL 11/14/2019 12:13:51'!
PASSED!

!testRun: #ClientRestInterfaceTest #test04CanAddItemsToCart stamp: 'CL 11/14/2019 12:13:51'!
PASSED!

!testRun: #ClientRestInterfaceTest #test05CanAddItemsToMultipleCarts stamp: 'CL 11/14/2019 12:13:51'!
PASSED!

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/14/2019 12:13:51'!
PASSED!

!testRun: #ClientRestInterfaceTest #test07CanListPurchasesOfMoreThanOneCart stamp: 'CL 11/14/2019 12:13:51'!
PASSED!
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:20:30'!
test08CanNotAddItemsToInvalidCart
	|aCartID aSalesInputRestInterface anItem|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem. 
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.! !

(Bag new) asString!
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:32:33' prior: 50788810!
test08CanNotAddItemsToInvalidCart
	|aCartID aSalesInputRestInterface anItem anInvalidCartID|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: '1' andPassword: '1234'.
	anItem := testObjectsFactory itemSellByTheStore.
	anInvalidCartID := aCartID asString , 'Invalid'.
	
	self
	should: [aSalesInputRestInterface addToCart: anInvalidCartID  thisAmount: 2 ofThisItem: anItem.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotCreateCartWithInvalidUserErrorMessage.
			aSalesInputRestInterface listPurchasesOf: '1' withPassword: '1234'].
	
	! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:32:59' prior: 50787011!
test05CanAddItemsToMultipleCarts
	|aFirstCartID aSecondCartID aSalesInputRestInterface anItem|

	aSalesInputRestInterface := self newClientRestInterface. 
	aFirstCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: '1234'.
	aSecondCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: '1234'.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aFirstCartID thisAmount: 2 ofThisItem: anItem.
	aSalesInputRestInterface addToCart: aSecondCartID thisAmount: 3 ofThisItem: anItem.
	
	self assert: ((aSalesInputRestInterface listCart: aFirstCartID) occurrencesOf: anItem) equals: 2.
	self assert: ((aSalesInputRestInterface listCart: aSecondCartID) occurrencesOf: anItem) equals: 3.! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:33:04' prior: 50786700!
test04CanAddItemsToCart
	|aCartID aSalesInputRestInterface anItem|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: '1234'.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem. 
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:33:13' prior: 50786554!
test03ValidUserCanCreateMultipleCarts
	|aFirstCartID aSecondCartID aSalesInputRestInterface|

	aSalesInputRestInterface := self newClientRestInterface. 
	aFirstCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: '1234'.
	aSecondCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: '1234'.
	
	self assert: ((aSalesInputRestInterface listCart: aFirstCartID) isEmpty).
	self assert: ((aSalesInputRestInterface listCart: aSecondCartID) isEmpty).
	self deny: (aFirstCartID = aSecondCartID).! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:33:17' prior: 50786458!
test02CanNotCreateCartWithInvalidUser

	userCheckerSimulatorClosure := [self error: ClientRestInterface canNotCreateCartWithInvalidUserErrorMessage].
	self
	should: [(self newClientRestInterface) createCartWithClientID: testObjectsFactory defaultClientID andPassword: '1234'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotCreateCartWithInvalidUserErrorMessage.]! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:33:21' prior: 50786233!
test01CanCreateCartWithValidUser
	|aCartID aSalesInputRestInterface|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: '1234'.
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) isEmpty).! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:33:37' prior: 50788829!
test08CanNotAddItemsToInvalidCart
	|aCartID aSalesInputRestInterface anItem anInvalidCartID|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: '1234'.
	anItem := testObjectsFactory itemSellByTheStore.
	anInvalidCartID := aCartID asString , 'Invalid'.
	
	self
	should: [aSalesInputRestInterface addToCart: anInvalidCartID  thisAmount: 2 ofThisItem: anItem.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotCreateCartWithInvalidUserErrorMessage.
			aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: '1234'].
	
	! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:33:54' prior: 50788945!
test01CanCreateCartWithValidUser
	|aCartID aSalesInputRestInterface|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) isEmpty).! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:33:58' prior: 50788927!
test02CanNotCreateCartWithInvalidUser

	userCheckerSimulatorClosure := [self error: ClientRestInterface canNotCreateCartWithInvalidUserErrorMessage].
	self
	should: [(self newClientRestInterface) createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotCreateCartWithInvalidUserErrorMessage.]! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:34:02' prior: 50788904!
test03ValidUserCanCreateMultipleCarts
	|aFirstCartID aSecondCartID aSalesInputRestInterface|

	aSalesInputRestInterface := self newClientRestInterface. 
	aFirstCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	aSecondCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: '1234'.
	
	self assert: ((aSalesInputRestInterface listCart: aFirstCartID) isEmpty).
	self assert: ((aSalesInputRestInterface listCart: aSecondCartID) isEmpty).
	self deny: (aFirstCartID = aSecondCartID).! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:34:05' prior: 50789021!
test03ValidUserCanCreateMultipleCarts
	|aFirstCartID aSecondCartID aSalesInputRestInterface|

	aSalesInputRestInterface := self newClientRestInterface. 
	aFirstCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	aSecondCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	
	self assert: ((aSalesInputRestInterface listCart: aFirstCartID) isEmpty).
	self assert: ((aSalesInputRestInterface listCart: aSecondCartID) isEmpty).
	self deny: (aFirstCartID = aSecondCartID).! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:34:10' prior: 50788885!
test04CanAddItemsToCart
	|aCartID aSalesInputRestInterface anItem|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem. 
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:34:21' prior: 50788855!
test05CanAddItemsToMultipleCarts
	|aFirstCartID aSecondCartID aSalesInputRestInterface anItem|

	aSalesInputRestInterface := self newClientRestInterface. 
	aFirstCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	aSecondCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aFirstCartID thisAmount: 2 ofThisItem: anItem.
	aSalesInputRestInterface addToCart: aSecondCartID thisAmount: 3 ofThisItem: anItem.
	
	self assert: ((aSalesInputRestInterface listCart: aFirstCartID) occurrencesOf: anItem) equals: 2.
	self assert: ((aSalesInputRestInterface listCart: aSecondCartID) occurrencesOf: anItem) equals: 3.! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:34:33' prior: 50788959!
test08CanNotAddItemsToInvalidCart
	|aCartID aSalesInputRestInterface anItem anInvalidCartID|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	anInvalidCartID := aCartID asString , 'Invalid'.
	
	self
	should: [aSalesInputRestInterface addToCart: anInvalidCartID  thisAmount: 2 ofThisItem: anItem.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotCreateCartWithInvalidUserErrorMessage.
			aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: '1234'].
	
	! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:34:38' prior: 50789122!
test08CanNotAddItemsToInvalidCart
	|aCartID aSalesInputRestInterface anItem anInvalidCartID|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	anInvalidCartID := aCartID asString , 'Invalid'.
	
	self
	should: [aSalesInputRestInterface addToCart: anInvalidCartID  thisAmount: 2 ofThisItem: anItem.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotCreateCartWithInvalidUserErrorMessage.
			aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: testObjectsFactory defaultClientPassword].
	
	! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:36:14' prior: 50789151!
test08CanNotAddItemsToInvalidCart
	|aCartID aSalesInputRestInterface anItem anInvalidCartID|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	anInvalidCartID := aCartID asString , 'Invalid'.
	
	self
	should: [aSalesInputRestInterface addToCart: anInvalidCartID  thisAmount: 2 ofThisItem: anItem.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotAddToInvalidCartErrorMessage.
			self assert: (aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: testObjectsFactory defaultClientPassword) equals: '0'.].
	
	! !

!testRun: #ClientRestInterfaceTest #test08CanNotAddItemsToInvalidCart stamp: 'CL 11/14/2019 12:36:20'!
ERROR!
!ClientRestInterface class methodsFor: 'error handling' stamp: 'CL 11/14/2019 12:36:42'!
canNotAddToInvalidCartErrorMessage
	self shouldBeImplemented.! !
!ClientRestInterface class methodsFor: 'error handling' stamp: 'CL 11/14/2019 12:37:22' prior: 50789214!
canNotAddToInvalidCartErrorMessage
	^'No se pueden agregar productos en un carrito invalido'! !

!testRun: #ClientRestInterfaceTest #test08CanNotAddItemsToInvalidCart stamp: 'CL 11/14/2019 12:37:25'!
FAILURE!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:39:39' prior: 50787132!
addToCart: aCartID thisAmount: anAmountOfItems ofThisItem: anItem 
	(clientsCarts at: aCartID ifAbsent:[self error: self class canNotAddToInvalidCartErrorMessage]) add: anAmountOfItems of: anItem! !

!testRun: #ClientRestInterfaceTest #test08CanNotAddItemsToInvalidCart stamp: 'CL 11/14/2019 12:40:09'!
ERROR!

clients at: aClientID ifAbsent: [^'0']!

clients at: aClientID!

clientCarts size!

clientCarts at: clientCartsIndex!

!testRun: #ClientRestInterfaceTest #test08CanNotAddItemsToInvalidCart stamp: 'CL 11/14/2019 12:43:49'!
ERROR!

!testRun: #ClientRestInterfaceTest #test08CanNotAddItemsToInvalidCart stamp: 'CL 11/14/2019 12:44:20'!
ERROR!

!testRun: #ClientRestInterfaceTest #test08CanNotAddItemsToInvalidCart stamp: 'CL 11/14/2019 12:44:20'!
ERROR!

(self listCart: (clientCarts at: clientCartsIndex))!

totalItems addAll: (self listCart: (clientCarts at: clientCartsIndex))!

totalPrice := totalPrice + (clientsCarts at: (clientCarts at: clientCartsIndex)) total!

clientCarts at: clientCartsIndex!

(clientsCarts at: (clientCarts at: clientCartsIndex))!

(clientsCarts at: (clientCarts at: clientCartsIndex)) total!

catalog:=1.!

items:= OrderedCollection new.!

items sum: [ :anItem | catalog:=catalog+1 ]!
!Cart methodsFor: 'total' stamp: 'CL 11/14/2019 12:50:15' prior: 50785241!
total
	(items isEmpty) ifTrue:[^0].
	^ items sum: [ :anItem | catalog at: anItem ]! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:53:53' prior: 50788756!
listPurchasesOf: aClientID withPassword: aClientPassword

	| cartsList clientCarts clientCartsIndex totalItems totalPrice |
	clientCarts := clients at: aClientID ifAbsent: [^'0'].
	clientCartsIndex := 1.
	totalItems := Bag new.
	totalPrice:= 0.
	clientCarts do: 
	[:clientCart | totalItems addAll: (self listCart: clientCart). 
		totalPrice := totalPrice + (clientsCarts at: clientCart) total.].
	cartsList := totalItems sortedElements inject:'' into:[:aCartList :anItemAndAmount | aCartList , anItemAndAmount key asString , '|' , anItemAndAmount value asString , '|'].
	^cartsList , totalPrice asString! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 12:54:06' prior: 50789277!
listPurchasesOf: aClientID withPassword: aClientPassword

	| cartsList clientCarts totalItems totalPrice |
	clientCarts := clients at: aClientID ifAbsent: [^'0'].
	totalItems := Bag new.
	totalPrice:= 0.
	clientCarts do: 
	[:clientCart | totalItems addAll: (self listCart: clientCart). 
		totalPrice := totalPrice + (clientsCarts at: clientCart) total.].
	cartsList := totalItems sortedElements inject:'' into:[:aCartList :anItemAndAmount | aCartList , anItemAndAmount key asString , '|' , anItemAndAmount value asString , '|'].
	^cartsList , totalPrice asString! !

!testRun: #ClientRestInterfaceTest #test07CanListPurchasesOfMoreThanOneCart stamp: 'CL 11/14/2019 12:54:18'!
PASSED!

!testRun: #ClientRestInterfaceTest #test08CanNotAddItemsToInvalidCart stamp: 'CL 11/14/2019 12:54:23'!
PASSED!

!testRun: #ClientRestInterfaceTest #test01CanCreateCartWithValidUser stamp: 'CL 11/14/2019 12:54:31'!
PASSED!

!testRun: #ClientRestInterfaceTest #test02CanNotCreateCartWithInvalidUser stamp: 'CL 11/14/2019 12:54:31'!
PASSED!

!testRun: #ClientRestInterfaceTest #test03ValidUserCanCreateMultipleCarts stamp: 'CL 11/14/2019 12:54:31'!
PASSED!

!testRun: #ClientRestInterfaceTest #test04CanAddItemsToCart stamp: 'CL 11/14/2019 12:54:31'!
PASSED!

!testRun: #ClientRestInterfaceTest #test05CanAddItemsToMultipleCarts stamp: 'CL 11/14/2019 12:54:31'!
PASSED!

!testRun: #ClientRestInterfaceTest #test06CanCheckoutACart stamp: 'CL 11/14/2019 12:54:31'!
PASSED!

!testRun: #ClientRestInterfaceTest #test07CanListPurchasesOfMoreThanOneCart stamp: 'CL 11/14/2019 12:54:31'!
PASSED!

!testRun: #ClientRestInterfaceTest #test08CanNotAddItemsToInvalidCart stamp: 'CL 11/14/2019 12:54:31'!
PASSED!
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 13:02:33'!
test09CanNotListInvalidCart
	|aCartID aSalesInputRestInterface anItem|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem. 
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 13:03:23' prior: 50789356!
test09CanNotListInvalidCart
	|aCartID aSalesInputRestInterface anItem|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem. 
	
	self
	should: [(aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotAddToInvalidCartErrorMessage.
			self assert: (aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: testObjectsFactory defaultClientPassword) equals: '0'.].! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 13:03:42' prior: 50789376!
test09CanNotListInvalidCart
	|aCartID aSalesInputRestInterface anItem anInvalidCartID|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	anInvalidCartID := aCartID asString , 'Invalid'.
	
	self
	should: [(aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotAddToInvalidCartErrorMessage.
			self assert: (aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: testObjectsFactory defaultClientPassword) equals: '0'.].! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 13:03:49' prior: 50789406!
test09CanNotListInvalidCart
	|aCartID aSalesInputRestInterface anItem anInvalidCartID|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	anInvalidCartID := aCartID asString , 'Invalid'.
	
	self
	should: [(aSalesInputRestInterface listCart: anInvalidCartID) occurrencesOf: anItem.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotAddToInvalidCartErrorMessage.
			self assert: (aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: testObjectsFactory defaultClientPassword) equals: '0'.].! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 13:04:12' prior: 50789438!
test09CanNotListInvalidCart
	|aCartID aSalesInputRestInterface anItem anInvalidCartID|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	anInvalidCartID := aCartID asString , 'Invalid'.
	
	self
	should: [(aSalesInputRestInterface listCart: anInvalidCartID) occurrencesOf: anItem.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotAddToInvalidCartErrorMessage.].! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 13:04:25' prior: 50789470!
test09CanNotListInvalidCart
	|aCartID aSalesInputRestInterface anItem anInvalidCartID|

	aSalesInputRestInterface := self newClientRestInterface. 
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	anInvalidCartID := aCartID asString , 'Invalid'.
	
	self
	should: [(aSalesInputRestInterface listCart: anInvalidCartID) occurrencesOf: anItem.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotListInvalidCartErrorMessage.].! !

!testRun: #ClientRestInterfaceTest #test09CanNotListInvalidCart stamp: 'CL 11/14/2019 13:04:27'!
ERROR!
!ClientRestInterface class methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 13:04:38'!
canNotListInvalidCartErrorMessage
	self shouldBeImplemented.! !
!ClientRestInterface class methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 13:04:57' prior: 50789527!
canNotListInvalidCartErrorMessage
	^'No se puede listar un carrito invalido'! !

!testRun: #ClientRestInterfaceTest #test09CanNotListInvalidCart stamp: 'CL 11/14/2019 13:05:01'!
FAILURE!
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 13:06:30' prior: 50787143!
listCart: aCartID 
	|clientsList|
	clientsList := Bag new.
	(clientsCarts at: aCartID ifAbsent:[self error: self class canNotAddToInvalidCartErrorMessage]) visitItemsFrom: self with: [:item | clientsList add: item].
	^clientsList! !
!ClientRestInterface methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 13:06:47' prior: 50789543!
listCart: aCartID 
	|clientsList|
	clientsList := Bag new.
	(clientsCarts at: aCartID ifAbsent:[self error: self class canNotListInvalidCartErrorMessage]) visitItemsFrom: self with: [:item | clientsList add: item].
	^clientsList! !

!testRun: #ClientRestInterfaceTest #test09CanNotListInvalidCart stamp: 'CL 11/14/2019 13:06:57'!
PASSED!
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 13:08:39'!
test10CanNotCheckoutInvalidCart
	|aCartID aSalesInputRestInterface anItem aCreditCardNumber aCreditCardOwnerName aCreditCardExpirationDate|

	aSalesInputRestInterface := self newClientRestInterface.
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	aCreditCardNumber := testObjectsFactory validCreditCardNumber.
	aCreditCardExpirationDate := testObjectsFactory validCreditCardExpirationDate.
	aCreditCardOwnerName := testObjectsFactory validCreditCardOwnerName.
	
	self
	should: [aSalesInputRestInterface checkoutCart: aCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotListInvalidCartErrorMessage.].
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.
	self assert:(aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: testObjectsFactory defaultClientPassword ) equals: anItem asString , '|2|' , ((testObjectsFactory defaultCatalog at: anItem)*2) asString.! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 13:10:20' prior: 50789568!
test10CanNotCheckoutInvalidCart
	|aCartID aSalesInputRestInterface anItem aCreditCardNumber aCreditCardOwnerName aCreditCardExpirationDate anInvalidCartID|

	aSalesInputRestInterface := self newClientRestInterface.
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	aCreditCardNumber := testObjectsFactory validCreditCardNumber.
	aCreditCardExpirationDate := testObjectsFactory validCreditCardExpirationDate.
	aCreditCardOwnerName := testObjectsFactory validCreditCardOwnerName.
	
	self
	should: [aSalesInputRestInterface checkoutCart: anInvalidCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotListInvalidCartErrorMessage.].
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.
	self assert:(aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: testObjectsFactory defaultClientPassword ) equals: anItem asString , '|2|' , ((testObjectsFactory defaultCatalog at: anItem)*2) asString.! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 13:10:32' prior: 50789615!
test10CanNotCheckoutInvalidCart
	|aCartID aSalesInputRestInterface anItem aCreditCardNumber aCreditCardOwnerName aCreditCardExpirationDate anInvalidCartID|

	aSalesInputRestInterface := self newClientRestInterface.
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	aCreditCardNumber := testObjectsFactory validCreditCardNumber.
	aCreditCardExpirationDate := testObjectsFactory validCreditCardExpirationDate.
	aCreditCardOwnerName := testObjectsFactory validCreditCardOwnerName.
	anInvalidCartID := aCartID asString , 'Invalid'.
	
	self
	should: [aSalesInputRestInterface checkoutCart: anInvalidCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotListInvalidCartErrorMessage.].
	
	self assert: ((aSalesInputRestInterface listCart: aCartID) occurrencesOf: anItem) equals: 2.
	self assert:(aSalesInputRestInterface listPurchasesOf: testObjectsFactory defaultClientID withPassword: testObjectsFactory defaultClientPassword ) equals: anItem asString , '|2|' , ((testObjectsFactory defaultCatalog at: anItem)*2) asString.! !
!ClientRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CL 11/14/2019 13:12:32' prior: 50789662!
test10CanNotCheckoutInvalidCart
	|aCartID aSalesInputRestInterface anItem aCreditCardNumber aCreditCardOwnerName aCreditCardExpirationDate anInvalidCartID|

	aSalesInputRestInterface := self newClientRestInterface.
	aCartID := aSalesInputRestInterface createCartWithClientID: testObjectsFactory defaultClientID andPassword: testObjectsFactory defaultClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aSalesInputRestInterface addToCart: aCartID thisAmount: 2 ofThisItem: anItem.
	aCreditCardNumber := testObjectsFactory validCreditCardNumber.
	aCreditCardExpirationDate := testObjectsFactory validCreditCardExpirationDate.
	aCreditCardOwnerName := testObjectsFactory validCreditCardOwnerName.
	anInvalidCartID := aCartID asString , 'Invalid'.
	
	self
	should: [aSalesInputRestInterface checkoutCart: anInvalidCartID withCCN: aCreditCardNumber withCCED: 								aCreditCardExpirationDate withCCO: aCreditCardOwnerName.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = ClientRestInterface canNotListInvalidCartErrorMessage.].
	
! !

----QUIT----(14 November 2019 13:12:47) CuisUniversity-3938.image priorSource: 14603085!